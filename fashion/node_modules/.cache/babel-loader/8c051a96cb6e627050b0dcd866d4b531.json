{"ast":null,"code":"import BitRateAction from \"./transcode/BitRateAction.js\";\nimport AudioCodecAction from \"./transcode/AudioCodecAction.js\";\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction.js\";\nimport FPSAction from \"./transcode/FPSAction.js\";\nimport FPSRangeAction from \"./transcode/FPSRangeAction.js\";\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction.js\";\nimport StreamingProfileAction from \"./transcode/StreamingProfile.js\";\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction.js\";\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction.js\";\n/**\r\n * @description Defines how to transcode a video to another format\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Transcoding video to other formats}\r\n * @memberOf Actions\r\n * @namespace Transcode\r\n * @example\r\n * // See examples under each method\r\n */\n\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the audio sample frequency.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control|Audio frequency control}\r\n * @param {AudioFrequencyType|string|number} freq The audio frequency.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {FREQ11025} from '@cloudinary/url-gen/qualifiers/audioFrequency'\r\n * import {audioFrequency} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode(audioFrequency(FREQ11025()))\r\n * @return {Actions.Transcode.AudioFrequencyAction}\r\n *\r\n */\n\nfunction audioFrequency(freq) {\n  return new AudioFrequencyAction(freq);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the audio codec or removes the audio channel.\r\n * @param {AudioCodecType | string} codec The audio codec or \"none\".\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {aac} from '@cloudinary/url-gen/qualifiers/audioCodec'\r\n * import {audioCodec} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( audioCodec( aac() ) );\r\n * @return {Actions.Transcode.AudioCodecAction}\r\n */\n\n\nfunction audioCodec(codec) {\n  return new AudioCodecAction(codec);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the video bitrate.\r\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control|Bitrate control}\r\n *\r\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\r\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\r\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\r\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {bitRate} from '@cloudinary/url-gen/actions/transcode'\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( bitRate(500).constant() );\r\n * @return {Actions.Transcode.BitRateAction}\r\n */\n\n\nfunction bitRate(bitRate) {\n  return new BitRateAction(bitRate);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @param {number} from frame rate\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fps} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( fps(15) );\r\n * @return {Actions.Transcode.FPSAction}\r\n */\n\n\nfunction fps(from) {\n  return new FPSAction(from);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\r\n * delivered with an expected FPS level (helps with sync to audio).\r\n * @param {number} from frame rate\r\n * @param {number} to frame rate\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fpsRange} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( fpsRange( 20, 25 ) );\r\n * @return {Actions.Transcode.FPSRangeAction}\r\n */\n\n\nfunction fpsRange(from, to) {\n  return new FPSRangeAction(from, to);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the keyframe interval of the delivered video.\r\n * @param {number | string} interval The keyframe interval in seconds.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {keyframeInterval} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( keyframeInterval( 0.5 ) );\r\n * @return {Actions.Transcode.KeyframeIntervalsAction}\r\n */\n\n\nfunction keyframeInterval(interval) {\n  return new KeyframeIntervalsAction(interval);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\r\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\r\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\r\n * profiles or to create new custom profiles.\r\n * @param {string} profile The streaming profile.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fullHd} from \"@cloudinary/url-gen/qualifiers/streamingProfile\";\r\n * import {streamingProfile} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( streamingProfile( fullHd() ) );\r\n * @return {Actions.Transcode.StreamingProfileAction}\r\n */\n\n\nfunction streamingProfile(profile) {\n  return new StreamingProfileAction(profile);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Converts a video to animated image.\r\n * @param {string | AnimatedFormatType} animatedFormat The streaming profile.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {gif} from '@cloudinary/url-gen/qualifiers/animatedFormat'\r\n * import {toAnimated} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( toAnimated( gif() ) );\r\n * @return {Actions.Transcode.ToAnimatedAction}\r\n */\n\n\nfunction toAnimated() {\n  let animatedFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return new ToAnimatedAction(animatedFormat);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the video codec.\r\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {vp9} from '@cloudinary/url-gen/qualifiers/videoCodec'\r\n * import {videoCodec} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( videoCodec( vp9() ) );\r\n * @return {Actions.Transcode.VideoCodecAction}\r\n */\n\n\nfunction videoCodec(videoCodecType) {\n  return new VideoCodecAction(videoCodecType);\n}\n\nconst Transcode = {\n  bitRate,\n  audioCodec,\n  audioFrequency,\n  fps,\n  fpsRange,\n  keyframeInterval,\n  streamingProfile,\n  toAnimated,\n  videoCodec\n};\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/actions/transcode.js"],"names":["BitRateAction","AudioCodecAction","AudioFrequencyAction","FPSAction","FPSRangeAction","KeyframeIntervalsAction","StreamingProfileAction","ToAnimatedAction","VideoCodecAction","audioFrequency","freq","audioCodec","codec","bitRate","fps","from","fpsRange","to","keyframeInterval","interval","streamingProfile","profile","toAnimated","animatedFormat","videoCodec","videoCodecType","Transcode"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8BAA1B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,sBAAP,MAAmC,iCAAnC;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,SAAO,IAAIR,oBAAJ,CAAyBQ,IAAzB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAO,IAAIX,gBAAJ,CAAqBW,KAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBA,OAAjB,EAA0B;AACtB,SAAO,IAAIb,aAAJ,CAAkBa,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,GAAT,CAAaC,IAAb,EAAmB;AACf,SAAO,IAAIZ,SAAJ,CAAcY,IAAd,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBD,IAAlB,EAAwBE,EAAxB,EAA4B;AACxB,SAAO,IAAIb,cAAJ,CAAmBW,IAAnB,EAAyBE,EAAzB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAChC,SAAO,IAAId,uBAAJ,CAA4Bc,QAA5B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,SAAO,IAAIf,sBAAJ,CAA2Be,OAA3B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAyC;AAAA,MAArBC,cAAqB,uEAAJ,EAAI;AACrC,SAAO,IAAIhB,gBAAJ,CAAqBgB,cAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,cAApB,EAAoC;AAChC,SAAO,IAAIjB,gBAAJ,CAAqBiB,cAArB,CAAP;AACH;;AACD,MAAMC,SAAS,GAAG;AAAEb,EAAAA,OAAF;AAAWF,EAAAA,UAAX;AAAuBF,EAAAA,cAAvB;AAAuCK,EAAAA,GAAvC;AAA4CE,EAAAA,QAA5C;AAAsDE,EAAAA,gBAAtD;AAAwEE,EAAAA,gBAAxE;AAA0FE,EAAAA,UAA1F;AAAsGE,EAAAA;AAAtG,CAAlB;AACA,SAASE,SAAT,EAAoBb,OAApB,EAA6BF,UAA7B,EAAyCF,cAAzC,EAAyDK,GAAzD,EAA8DE,QAA9D,EAAwEE,gBAAxE,EAA0FE,gBAA1F,EAA4GE,UAA5G,EAAwHE,UAAxH","sourcesContent":["import BitRateAction from \"./transcode/BitRateAction.js\";\r\nimport AudioCodecAction from \"./transcode/AudioCodecAction.js\";\r\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction.js\";\r\nimport FPSAction from \"./transcode/FPSAction.js\";\r\nimport FPSRangeAction from \"./transcode/FPSRangeAction.js\";\r\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction.js\";\r\nimport StreamingProfileAction from \"./transcode/StreamingProfile.js\";\r\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction.js\";\r\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction.js\";\r\n/**\r\n * @description Defines how to transcode a video to another format\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Transcoding video to other formats}\r\n * @memberOf Actions\r\n * @namespace Transcode\r\n * @example\r\n * // See examples under each method\r\n */\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the audio sample frequency.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control|Audio frequency control}\r\n * @param {AudioFrequencyType|string|number} freq The audio frequency.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {FREQ11025} from '@cloudinary/url-gen/qualifiers/audioFrequency'\r\n * import {audioFrequency} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode(audioFrequency(FREQ11025()))\r\n * @return {Actions.Transcode.AudioFrequencyAction}\r\n *\r\n */\r\nfunction audioFrequency(freq) {\r\n    return new AudioFrequencyAction(freq);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the audio codec or removes the audio channel.\r\n * @param {AudioCodecType | string} codec The audio codec or \"none\".\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {aac} from '@cloudinary/url-gen/qualifiers/audioCodec'\r\n * import {audioCodec} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( audioCodec( aac() ) );\r\n * @return {Actions.Transcode.AudioCodecAction}\r\n */\r\nfunction audioCodec(codec) {\r\n    return new AudioCodecAction(codec);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the video bitrate.\r\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control|Bitrate control}\r\n *\r\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\r\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\r\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\r\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {bitRate} from '@cloudinary/url-gen/actions/transcode'\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( bitRate(500).constant() );\r\n * @return {Actions.Transcode.BitRateAction}\r\n */\r\nfunction bitRate(bitRate) {\r\n    return new BitRateAction(bitRate);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @param {number} from frame rate\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fps} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( fps(15) );\r\n * @return {Actions.Transcode.FPSAction}\r\n */\r\nfunction fps(from) {\r\n    return new FPSAction(from);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\r\n * delivered with an expected FPS level (helps with sync to audio).\r\n * @param {number} from frame rate\r\n * @param {number} to frame rate\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fpsRange} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( fpsRange( 20, 25 ) );\r\n * @return {Actions.Transcode.FPSRangeAction}\r\n */\r\nfunction fpsRange(from, to) {\r\n    return new FPSRangeAction(from, to);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the keyframe interval of the delivered video.\r\n * @param {number | string} interval The keyframe interval in seconds.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {keyframeInterval} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( keyframeInterval( 0.5 ) );\r\n * @return {Actions.Transcode.KeyframeIntervalsAction}\r\n */\r\nfunction keyframeInterval(interval) {\r\n    return new KeyframeIntervalsAction(interval);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\r\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\r\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\r\n * profiles or to create new custom profiles.\r\n * @param {string} profile The streaming profile.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fullHd} from \"@cloudinary/url-gen/qualifiers/streamingProfile\";\r\n * import {streamingProfile} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( streamingProfile( fullHd() ) );\r\n * @return {Actions.Transcode.StreamingProfileAction}\r\n */\r\nfunction streamingProfile(profile) {\r\n    return new StreamingProfileAction(profile);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Converts a video to animated image.\r\n * @param {string | AnimatedFormatType} animatedFormat The streaming profile.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {gif} from '@cloudinary/url-gen/qualifiers/animatedFormat'\r\n * import {toAnimated} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( toAnimated( gif() ) );\r\n * @return {Actions.Transcode.ToAnimatedAction}\r\n */\r\nfunction toAnimated(animatedFormat = '') {\r\n    return new ToAnimatedAction(animatedFormat);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the video codec.\r\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {vp9} from '@cloudinary/url-gen/qualifiers/videoCodec'\r\n * import {videoCodec} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( videoCodec( vp9() ) );\r\n * @return {Actions.Transcode.VideoCodecAction}\r\n */\r\nfunction videoCodec(videoCodecType) {\r\n    return new VideoCodecAction(videoCodecType);\r\n}\r\nconst Transcode = { bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\r\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\r\n"]},"metadata":{},"sourceType":"module"}