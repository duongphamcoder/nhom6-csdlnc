{"ast":null,"code":"import { stringPad } from \"./stringPad.js\";\n/**\r\n * @private\r\n * @description Reverses the version positions, x.y.z turns to z.y.x\r\n *              Pads each segment with '0' so they have length of 2\r\n *              Example: 1.2.3 -> 03.02.01\r\n * @param {string} semVer Input can be either x.y.z or x.y\r\n * @return {string} in the form of zz.yy.xx (\r\n */\n\nexport function reverseVersion(semVer) {\n  if (semVer.split('.').length < 2) {\n    throw new Error('invalid semVer, must have at least two segments');\n  } // Split by '.', reverse, create new array with padded values and concat it together\n\n\n  return semVer.split('.').reverse().map(segment => {\n    // try to cast to number\n    const asNumber = +segment;\n\n    if (isNaN(asNumber) || asNumber < 0) {\n      throw 'Invalid version number provided';\n    }\n\n    return stringPad(segment, 2, '0');\n  }).join('.');\n}","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion/node_modules/@cloudinary/url-gen/sdkAnalytics/reverseVersion.js"],"names":["stringPad","reverseVersion","semVer","split","length","Error","reverse","map","segment","asNumber","isNaN","join"],"mappings":"AAAA,SAASA,SAAT,QAA0B,gBAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AACnC,MAAIA,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACH,GAHkC,CAInC;;;AACA,SAAOH,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkBG,OAAlB,GAA4BC,GAA5B,CAAiCC,OAAD,IAAa;AAChD;AACA,UAAMC,QAAQ,GAAG,CAACD,OAAlB;;AACA,QAAIE,KAAK,CAACD,QAAD,CAAL,IAAmBA,QAAQ,GAAG,CAAlC,EAAqC;AACjC,YAAM,iCAAN;AACH;;AACD,WAAOT,SAAS,CAACQ,OAAD,EAAU,CAAV,EAAa,GAAb,CAAhB;AACH,GAPM,EAOJG,IAPI,CAOC,GAPD,CAAP;AAQH","sourcesContent":["import { stringPad } from \"./stringPad.js\";\r\n/**\r\n * @private\r\n * @description Reverses the version positions, x.y.z turns to z.y.x\r\n *              Pads each segment with '0' so they have length of 2\r\n *              Example: 1.2.3 -> 03.02.01\r\n * @param {string} semVer Input can be either x.y.z or x.y\r\n * @return {string} in the form of zz.yy.xx (\r\n */\r\nexport function reverseVersion(semVer) {\r\n    if (semVer.split('.').length < 2) {\r\n        throw new Error('invalid semVer, must have at least two segments');\r\n    }\r\n    // Split by '.', reverse, create new array with padded values and concat it together\r\n    return semVer.split('.').reverse().map((segment) => {\r\n        // try to cast to number\r\n        const asNumber = +segment;\r\n        if (isNaN(asNumber) || asNumber < 0) {\r\n            throw 'Invalid version number provided';\r\n        }\r\n        return stringPad(segment, 2, '0');\r\n    }).join('.');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}