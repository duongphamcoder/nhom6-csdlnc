{"ast":null,"code":"/**\r\n * Create a copy of the source object with all keys in camelCase\r\n * @function Util.withCamelCaseKeys\r\n * @return {Object} a new object\r\n * @param source\r\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n  return convertKeys(source, camelCase);\n};\n/**\r\n * Convert string to camelCase\r\n * @function Util.camelCase\r\n * @param {string} source - the string to convert\r\n * @return {string} in camelCase format\r\n */\n\nexport const camelCase = function (source) {\n  var words = source.match(reWords);\n  words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n  words[0] = words[0].toLocaleLowerCase();\n  return words.join('');\n};\n/**\r\n * Creates a new object from source, with the keys transformed using the converter.\r\n * @param {object} source\r\n * @param {function|null} converter\r\n * @returns {object}\r\n */\n\nexport var convertKeys = function (source, converter) {\n  var result, value;\n  result = {};\n\n  for (let key in source) {\n    value = source[key];\n\n    if (converter) {\n      key = converter(key);\n    }\n\n    if (!isEmpty(key)) {\n      // @ts-ignore\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\nexport var reWords = function () {\n  var lower, upper;\n  upper = '[A-Z]';\n  lower = '[a-z]+';\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}();\nexport function identity(x) {\n  return x;\n}\nexport function contains(a, obj) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function difference(arr1, arr2) {\n  return arr1.filter(x => !arr2.includes(x));\n}","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion/node_modules/@cloudinary/url-gen/backwards/utils/legacyBaseUtil.js"],"names":["isEmpty","withCamelCaseKeys","source","convertKeys","camelCase","words","match","reWords","map","word","charAt","toLocaleUpperCase","slice","toLocaleLowerCase","join","converter","result","value","key","lower","upper","RegExp","identity","x","contains","a","obj","i","length","difference","arr1","arr2","filter","includes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,cAAxB;AACA,OAAO,MAAMC,iBAAiB,GAAG,UAAUC,MAAV,EAAkB;AAC/C,SAAOC,WAAW,CAACD,MAAD,EAASE,SAAT,CAAlB;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMA,SAAS,GAAG,UAAUF,MAAV,EAAkB;AACvC,MAAIG,KAAK,GAAGH,MAAM,CAACI,KAAP,CAAaC,OAAb,CAAZ;AACAF,EAAAA,KAAK,GAAGA,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,iBAAf,KAAqCF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcC,iBAAd,EAAvD,CAAR;AACAR,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASQ,iBAAT,EAAX;AACA,SAAOR,KAAK,CAACS,IAAN,CAAW,EAAX,CAAP;AACH,CALM;AAMP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIX,WAAW,GAAG,UAAUD,MAAV,EAAkBa,SAAlB,EAA6B;AAClD,MAAIC,MAAJ,EAAYC,KAAZ;AACAD,EAAAA,MAAM,GAAG,EAAT;;AACA,OAAK,IAAIE,GAAT,IAAgBhB,MAAhB,EAAwB;AACpBe,IAAAA,KAAK,GAAGf,MAAM,CAACgB,GAAD,CAAd;;AACA,QAAIH,SAAJ,EAAe;AACXG,MAAAA,GAAG,GAAGH,SAAS,CAACG,GAAD,CAAf;AACH;;AACD,QAAI,CAAClB,OAAO,CAACkB,GAAD,CAAZ,EAAmB;AACf;AACAF,MAAAA,MAAM,CAACE,GAAD,CAAN,GAAcD,KAAd;AACH;AACJ;;AACD,SAAOD,MAAP;AACH,CAdM;AAeP,OAAO,IAAIT,OAAO,GAAI,YAAY;AAC9B,MAAIY,KAAJ,EAAWC,KAAX;AACAA,EAAAA,KAAK,GAAG,OAAR;AACAD,EAAAA,KAAK,GAAG,QAAR;AACA,SAAOE,MAAM,CAACD,KAAK,GAAG,MAAR,GAAiBA,KAAjB,GAAyBD,KAAzB,GAAiC,IAAjC,GAAwCC,KAAxC,GAAgD,GAAhD,GAAsDD,KAAtD,GAA8D,GAA9D,GAAoEC,KAApE,GAA4E,UAA7E,EAAyF,GAAzF,CAAb;AACH,CALoB,EAAd;AAMP,OAAO,SAASE,QAAT,CAAkBC,CAAlB,EAAqB;AACxB,SAAOA,CAAP;AACH;AACD,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,GAArB,EAA0B;AAC7B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,QAAIF,CAAC,CAACE,CAAD,CAAD,KAASD,GAAb,EAAkB;AACd,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH;AACD,OAAO,SAASG,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AACnC,SAAOD,IAAI,CAACE,MAAL,CAAYT,CAAC,IAAI,CAACQ,IAAI,CAACE,QAAL,CAAcV,CAAd,CAAlB,CAAP;AACH","sourcesContent":["/**\r\n * Create a copy of the source object with all keys in camelCase\r\n * @function Util.withCamelCaseKeys\r\n * @return {Object} a new object\r\n * @param source\r\n */\r\nimport { isEmpty } from \"./isEmpty.js\";\r\nexport const withCamelCaseKeys = function (source) {\r\n    return convertKeys(source, camelCase);\r\n};\r\n/**\r\n * Convert string to camelCase\r\n * @function Util.camelCase\r\n * @param {string} source - the string to convert\r\n * @return {string} in camelCase format\r\n */\r\nexport const camelCase = function (source) {\r\n    var words = source.match(reWords);\r\n    words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\r\n    words[0] = words[0].toLocaleLowerCase();\r\n    return words.join('');\r\n};\r\n/**\r\n * Creates a new object from source, with the keys transformed using the converter.\r\n * @param {object} source\r\n * @param {function|null} converter\r\n * @returns {object}\r\n */\r\nexport var convertKeys = function (source, converter) {\r\n    var result, value;\r\n    result = {};\r\n    for (let key in source) {\r\n        value = source[key];\r\n        if (converter) {\r\n            key = converter(key);\r\n        }\r\n        if (!isEmpty(key)) {\r\n            // @ts-ignore\r\n            result[key] = value;\r\n        }\r\n    }\r\n    return result;\r\n};\r\nexport var reWords = (function () {\r\n    var lower, upper;\r\n    upper = '[A-Z]';\r\n    lower = '[a-z]+';\r\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\r\n})();\r\nexport function identity(x) {\r\n    return x;\r\n}\r\nexport function contains(a, obj) {\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (a[i] === obj) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function difference(arr1, arr2) {\r\n    return arr1.filter(x => !arr2.includes(x));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}