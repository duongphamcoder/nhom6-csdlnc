{"ast":null,"code":"/**\r\n * @description Defines flags that you can use to alter the default transformation behavior.\r\n * @namespace Flag\r\n * @memberOf Qualifiers\r\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\r\n * Plays all frames rather than just delivering the first one as a static image.\r\n * Use this flag in addition to the flag or parameter controlling the delivery format,\r\n * for example f_auto or fl_awebp.\r\n\r\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\r\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\nfunction animated() {\n  return new FlagQualifier('animated');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated WebPs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction animatedWebP() {\n  return new FlagQualifier('awebp');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used together with automatic quality (q_auto):\r\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction anyFormat() {\n  return new FlagQualifier('any_format');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated PNGs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction animatedPng() {\n  return new FlagQualifier('apng');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image\r\n * (e.g., manually created using PhotoShop).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction clip() {\n  return new FlagQualifier('clip');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\r\n * using PhotoShop)\r\n * using an evenodd clipping rule.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction clipEvenOdd() {\n  return new FlagQualifier('clip_evenodd');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\r\n * transformation.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction forceStrip() {\n  return new FlagQualifier('force_strip');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Allows custom flag\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction custom(value) {\n  return new FlagQualifier(value);\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction forceIcc() {\n  return new FlagQualifier('force_icc');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Delivers the image as an attachment.\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction attachment(filename) {\n  return new FlagQualifier('attachment', filename);\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\r\n * transformed image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction getInfo() {\n  return new FlagQualifier('getinfo');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\r\n * Delivering in this format requires a private CDN configuration.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction hlsv3() {\n  return new FlagQualifier('hlsv3');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Sets the cache-control to immutable for the asset.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction immutableCache() {\n  return new FlagQualifier('immutable_cache');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\r\n * recalculated to maintain the aspect ratio of the original image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction ignoreInitialAspectRatio() {\n  return new FlagQualifier('ignore_aspect_ratio');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps the copyright related fields when stripping meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction keepAttribution() {\n  return new FlagQualifier('keep_attribution');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * Keep the Display Aspect Ratio metadata of the uploaded video (if itâ€™s different from the current video\r\n * dimensions).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction keepDar() {\n  return new FlagQualifier('keep_dar');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps all meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction keepIptc() {\n  return new FlagQualifier('keep_iptc');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\r\n * overlay or underlay instead of applying on the containing image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction layerApply() {\n  return new FlagQualifier('layer_apply');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Automatically use lossy compression when delivering animated GIF files.\r\n *\r\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\r\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\r\n * format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction lossy() {\n  return new FlagQualifier('lossy');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Convert the audio channel to mono\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction mono() {\n  return new FlagQualifier('mono');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction noOverflow() {\n  return new FlagQualifier('no_overflow');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction noStream() {\n  return new FlagQualifier('no_stream');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png24 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction png24() {\n  return new FlagQualifier('png24');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png32 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction png32() {\n  return new FlagQualifier('png32');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the PNG8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction png8() {\n  return new FlagQualifier('png8');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\r\n * delivered in PNG format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction preserveTransparency() {\n  return new FlagQualifier('preserve_transparency');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\r\n *\r\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\r\n * image is loaded.\r\n *\r\n * @param {string} mode? The mode to determine a specific progressive outcome as follows:\r\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\r\n *          (less iterations). This is the default mode when using q_auto.\r\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\r\n *           the required resolution.\r\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\r\n *           a specific value for quality.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction progressive(mode) {\n  return new FlagQualifier('progressive', mode);\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction regionRelative() {\n  return new FlagQualifier('region_relative');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\r\n * order to enable\r\n * PDF resizing and overlay manipulations.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction rasterize() {\n  return new FlagQualifier('rasterize');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction relative() {\n  return new FlagQualifier('relative');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction sanitize() {\n  return new FlagQualifier('sanitize');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\r\n * overlay.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction splice() {\n  return new FlagQualifier('splice');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction stripProfile() {\n  return new FlagQualifier('strip_profile');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description If the requested video transformation has already been generated, this flag works identically to\r\n * Flag::attachment.\r\n *\r\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\r\n * to begin immediately, streaming it as a fragmented video file.\r\n *\r\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\r\n * the download will begin only after the complete transformed video has been generated.\r\n *\r\n * Most standard video players successfully play fragmented video files without issue.\r\n *\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction streamingAttachment(filename) {\n  return new FlagQualifier('streaming_attachment', filename);\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction tiff8Lzw() {\n  return new FlagQualifier('tiff8_lzw');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays|Tiling overlay}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction tiled() {\n  return new FlagQualifier('tiled');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\r\n * includes a directive to play only a section of the video).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction truncateTS() {\n  return new FlagQualifier('truncate_ts');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction waveform() {\n  return new FlagQualifier('waveform');\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\n\n\nfunction ignoreMaskChannels() {\n  return new FlagQualifier('ignore_mask_channels');\n}\n\nconst Flag = {\n  animated,\n  anyFormat,\n  animatedPng,\n  animatedWebP,\n  clipEvenOdd,\n  lossy,\n  preserveTransparency,\n  png8,\n  png24,\n  png32,\n  progressive,\n  rasterize,\n  sanitize,\n  stripProfile,\n  tiff8Lzw,\n  attachment,\n  forceIcc,\n  forceStrip,\n  getInfo,\n  immutableCache,\n  keepAttribution,\n  keepIptc,\n  custom,\n  streamingAttachment,\n  hlsv3,\n  keepDar,\n  noStream,\n  mono,\n  layerApply,\n  relative,\n  regionRelative,\n  splice,\n  truncateTS,\n  waveform,\n  ignoreInitialAspectRatio,\n  clip,\n  tiled,\n  noOverflow,\n  ignoreMaskChannels\n};\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion/node_modules/@cloudinary/url-gen/qualifiers/flag.js"],"names":["FlagQualifier","animated","animatedWebP","anyFormat","animatedPng","clip","clipEvenOdd","forceStrip","custom","value","forceIcc","attachment","filename","getInfo","hlsv3","immutableCache","ignoreInitialAspectRatio","keepAttribution","keepDar","keepIptc","layerApply","lossy","mono","noOverflow","noStream","png24","png32","png8","preserveTransparency","progressive","mode","regionRelative","rasterize","relative","sanitize","splice","stripProfile","streamingAttachment","tiff8Lzw","tiled","truncateTS","waveform","ignoreMaskChannels","Flag"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,yBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAAoB;AAChB,SAAO,IAAID,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,YAAT,GAAwB;AACpB,SAAO,IAAIF,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,SAAT,GAAqB;AACjB,SAAO,IAAIH,aAAJ,CAAkB,YAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,WAAT,GAAuB;AACnB,SAAO,IAAIJ,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,IAAT,GAAgB;AACZ,SAAO,IAAIL,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,WAAT,GAAuB;AACnB,SAAO,IAAIN,aAAJ,CAAkB,cAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,UAAT,GAAsB;AAClB,SAAO,IAAIP,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,SAAO,IAAIT,aAAJ,CAAkBS,KAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,GAAoB;AAChB,SAAO,IAAIV,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAO,IAAIZ,aAAJ,CAAkB,YAAlB,EAAgCY,QAAhC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,GAAmB;AACf,SAAO,IAAIb,aAAJ,CAAkB,SAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,KAAT,GAAiB;AACb,SAAO,IAAId,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,cAAT,GAA0B;AACtB,SAAO,IAAIf,aAAJ,CAAkB,iBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,wBAAT,GAAoC;AAChC,SAAO,IAAIhB,aAAJ,CAAkB,qBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,eAAT,GAA2B;AACvB,SAAO,IAAIjB,aAAJ,CAAkB,kBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,OAAT,GAAmB;AACf,SAAO,IAAIlB,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmB,QAAT,GAAoB;AAChB,SAAO,IAAInB,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,UAAT,GAAsB;AAClB,SAAO,IAAIpB,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqB,KAAT,GAAiB;AACb,SAAO,IAAIrB,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsB,IAAT,GAAgB;AACZ,SAAO,IAAItB,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuB,UAAT,GAAsB;AAClB,SAAO,IAAIvB,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwB,QAAT,GAAoB;AAChB,SAAO,IAAIxB,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyB,KAAT,GAAiB;AACb,SAAO,IAAIzB,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,KAAT,GAAiB;AACb,SAAO,IAAI1B,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2B,IAAT,GAAgB;AACZ,SAAO,IAAI3B,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4B,oBAAT,GAAgC;AAC5B,SAAO,IAAI5B,aAAJ,CAAkB,uBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6B,WAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAO,IAAI9B,aAAJ,CAAkB,aAAlB,EAAiC8B,IAAjC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,GAA0B;AACtB,SAAO,IAAI/B,aAAJ,CAAkB,iBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,SAAT,GAAqB;AACjB,SAAO,IAAIhC,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiC,QAAT,GAAoB;AAChB,SAAO,IAAIjC,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkC,QAAT,GAAoB;AAChB,SAAO,IAAIlC,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,MAAT,GAAkB;AACd,SAAO,IAAInC,aAAJ,CAAkB,QAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoC,YAAT,GAAwB;AACpB,SAAO,IAAIpC,aAAJ,CAAkB,eAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqC,mBAAT,CAA6BzB,QAA7B,EAAuC;AACnC,SAAO,IAAIZ,aAAJ,CAAkB,sBAAlB,EAA0CY,QAA1C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,QAAT,GAAoB;AAChB,SAAO,IAAItC,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuC,KAAT,GAAiB;AACb,SAAO,IAAIvC,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwC,UAAT,GAAsB;AAClB,SAAO,IAAIxC,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyC,QAAT,GAAoB;AAChB,SAAO,IAAIzC,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0C,kBAAT,GAA8B;AAC1B,SAAO,IAAI1C,aAAJ,CAAkB,sBAAlB,CAAP;AACH;;AACD,MAAM2C,IAAI,GAAG;AACT1C,EAAAA,QADS;AACCE,EAAAA,SADD;AACYC,EAAAA,WADZ;AACyBF,EAAAA,YADzB;AAETI,EAAAA,WAFS;AAEIe,EAAAA,KAFJ;AAEWO,EAAAA,oBAFX;AAEiCD,EAAAA,IAFjC;AAEuCF,EAAAA,KAFvC;AAE8CC,EAAAA,KAF9C;AAEqDG,EAAAA,WAFrD;AAEkEG,EAAAA,SAFlE;AAGTE,EAAAA,QAHS;AAGCE,EAAAA,YAHD;AAGeE,EAAAA,QAHf;AAGyB3B,EAAAA,UAHzB;AAGqCD,EAAAA,QAHrC;AAG+CH,EAAAA,UAH/C;AAG2DM,EAAAA,OAH3D;AAGoEE,EAAAA,cAHpE;AAITE,EAAAA,eAJS;AAIQE,EAAAA,QAJR;AAIkBX,EAAAA,MAJlB;AAI0B6B,EAAAA,mBAJ1B;AAI+CvB,EAAAA,KAJ/C;AAIsDI,EAAAA,OAJtD;AAI+DM,EAAAA,QAJ/D;AAIyEF,EAAAA,IAJzE;AAKTF,EAAAA,UALS;AAKGa,EAAAA,QALH;AAKaF,EAAAA,cALb;AAK6BI,EAAAA,MAL7B;AAKqCK,EAAAA,UALrC;AAKiDC,EAAAA,QALjD;AAK2DzB,EAAAA,wBAL3D;AAKqFX,EAAAA,IALrF;AAMTkC,EAAAA,KANS;AAMFhB,EAAAA,UANE;AAMUmB,EAAAA;AANV,CAAb;AAQA,SAASC,IAAT,EAAe1C,QAAf,EAAyBE,SAAzB,EAAoCC,WAApC,EAAiDF,YAAjD,EAA+DI,WAA/D,EAA4Ee,KAA5E,EAAmFO,oBAAnF,EAAyGD,IAAzG,EAA+GF,KAA/G,EAAsHC,KAAtH,EAA6HG,WAA7H,EAA0IG,SAA1I,EAAqJE,QAArJ,EAA+JE,YAA/J,EAA6KE,QAA7K,EAAuL3B,UAAvL,EAAmMD,QAAnM,EAA6MH,UAA7M,EAAyNM,OAAzN,EAAkOE,cAAlO,EAAkPE,eAAlP,EAAmQE,QAAnQ,EAA6QX,MAA7Q,EAAqR6B,mBAArR,EAA0SvB,KAA1S,EAAiTI,OAAjT,EAA0TM,QAA1T,EAAoUF,IAApU,EAA0UF,UAA1U,EAAsVa,QAAtV,EAAgWF,cAAhW,EAAgXI,MAAhX,EAAwXK,UAAxX,EAAoYC,QAApY,EAA8YzB,wBAA9Y,EAAwaX,IAAxa,EAA8akC,KAA9a,EAAqbhB,UAArb,EAAicmB,kBAAjc","sourcesContent":["/**\r\n * @description Defines flags that you can use to alter the default transformation behavior.\r\n * @namespace Flag\r\n * @memberOf Qualifiers\r\n */\r\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\r\n * Plays all frames rather than just delivering the first one as a static image.\r\n * Use this flag in addition to the flag or parameter controlling the delivery format,\r\n * for example f_auto or fl_awebp.\r\n\r\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\r\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animated() {\r\n    return new FlagQualifier('animated');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated WebPs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animatedWebP() {\r\n    return new FlagQualifier('awebp');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used together with automatic quality (q_auto):\r\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction anyFormat() {\r\n    return new FlagQualifier('any_format');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated PNGs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animatedPng() {\r\n    return new FlagQualifier('apng');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image\r\n * (e.g., manually created using PhotoShop).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction clip() {\r\n    return new FlagQualifier('clip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\r\n * using PhotoShop)\r\n * using an evenodd clipping rule.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction clipEvenOdd() {\r\n    return new FlagQualifier('clip_evenodd');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\r\n * transformation.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction forceStrip() {\r\n    return new FlagQualifier('force_strip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Allows custom flag\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction custom(value) {\r\n    return new FlagQualifier(value);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction forceIcc() {\r\n    return new FlagQualifier('force_icc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Delivers the image as an attachment.\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction attachment(filename) {\r\n    return new FlagQualifier('attachment', filename);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\r\n * transformed image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction getInfo() {\r\n    return new FlagQualifier('getinfo');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\r\n * Delivering in this format requires a private CDN configuration.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction hlsv3() {\r\n    return new FlagQualifier('hlsv3');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Sets the cache-control to immutable for the asset.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction immutableCache() {\r\n    return new FlagQualifier('immutable_cache');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\r\n * recalculated to maintain the aspect ratio of the original image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction ignoreInitialAspectRatio() {\r\n    return new FlagQualifier('ignore_aspect_ratio');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps the copyright related fields when stripping meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepAttribution() {\r\n    return new FlagQualifier('keep_attribution');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * Keep the Display Aspect Ratio metadata of the uploaded video (if itâ€™s different from the current video\r\n * dimensions).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepDar() {\r\n    return new FlagQualifier('keep_dar');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps all meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepIptc() {\r\n    return new FlagQualifier('keep_iptc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\r\n * overlay or underlay instead of applying on the containing image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction layerApply() {\r\n    return new FlagQualifier('layer_apply');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Automatically use lossy compression when delivering animated GIF files.\r\n *\r\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\r\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\r\n * format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction lossy() {\r\n    return new FlagQualifier('lossy');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Convert the audio channel to mono\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction mono() {\r\n    return new FlagQualifier('mono');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction noOverflow() {\r\n    return new FlagQualifier('no_overflow');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction noStream() {\r\n    return new FlagQualifier('no_stream');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png24 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png24() {\r\n    return new FlagQualifier('png24');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png32 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png32() {\r\n    return new FlagQualifier('png32');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the PNG8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png8() {\r\n    return new FlagQualifier('png8');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\r\n * delivered in PNG format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction preserveTransparency() {\r\n    return new FlagQualifier('preserve_transparency');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\r\n *\r\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\r\n * image is loaded.\r\n *\r\n * @param {string} mode? The mode to determine a specific progressive outcome as follows:\r\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\r\n *          (less iterations). This is the default mode when using q_auto.\r\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\r\n *           the required resolution.\r\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\r\n *           a specific value for quality.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction progressive(mode) {\r\n    return new FlagQualifier('progressive', mode);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction regionRelative() {\r\n    return new FlagQualifier('region_relative');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\r\n * order to enable\r\n * PDF resizing and overlay manipulations.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction rasterize() {\r\n    return new FlagQualifier('rasterize');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction relative() {\r\n    return new FlagQualifier('relative');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction sanitize() {\r\n    return new FlagQualifier('sanitize');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\r\n * overlay.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction splice() {\r\n    return new FlagQualifier('splice');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction stripProfile() {\r\n    return new FlagQualifier('strip_profile');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description If the requested video transformation has already been generated, this flag works identically to\r\n * Flag::attachment.\r\n *\r\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\r\n * to begin immediately, streaming it as a fragmented video file.\r\n *\r\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\r\n * the download will begin only after the complete transformed video has been generated.\r\n *\r\n * Most standard video players successfully play fragmented video files without issue.\r\n *\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction streamingAttachment(filename) {\r\n    return new FlagQualifier('streaming_attachment', filename);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction tiff8Lzw() {\r\n    return new FlagQualifier('tiff8_lzw');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays|Tiling overlay}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction tiled() {\r\n    return new FlagQualifier('tiled');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\r\n * includes a directive to play only a section of the video).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction truncateTS() {\r\n    return new FlagQualifier('truncate_ts');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction waveform() {\r\n    return new FlagQualifier('waveform');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction ignoreMaskChannels() {\r\n    return new FlagQualifier('ignore_mask_channels');\r\n}\r\nconst Flag = {\r\n    animated, anyFormat, animatedPng, animatedWebP,\r\n    clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize,\r\n    sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache,\r\n    keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono,\r\n    layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip,\r\n    tiled, noOverflow, ignoreMaskChannels\r\n};\r\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };\r\n"]},"metadata":{},"sourceType":"module"}