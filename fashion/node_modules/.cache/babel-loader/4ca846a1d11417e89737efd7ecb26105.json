{"ast":null,"code":"import { base64Encode } from \"../../internal/utils/base64Encode.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\r\n * @memberOf Actions.CustomFunction\r\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\r\n */\n\nclass CustomFunctionAction extends Action {\n  /**\r\n   *\r\n   * @param {string} fn The custom function to use, can be a URL or a publicID\r\n   */\n  constructor(fn) {\n    super();\n    this.fn = fn;\n  }\n\n  encodeCustomFunctionString(fn) {\n    const encodedSource = base64Encode(fn);\n    return encodedSource;\n  }\n  /**\r\n   * Use a WASM as a custom function,\r\n   * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\r\n   */\n\n\n  asWasm() {\n    this.mode = 'wasm';\n    return this;\n  }\n  /**\r\n   * Use a remote URL as a custom function\r\n   * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\r\n   */\n\n\n  asRemote() {\n    this.mode = 'remote';\n    return this;\n  }\n\n  prepareQualifiers() {\n    this.encodedFn = this.fn;\n\n    if (this.mode === 'remote') {\n      this.encodedFn = this.encodeCustomFunctionString(this.fn);\n    }\n\n    return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\n  }\n\n  toString() {\n    return super.toString().replace(/\\//g, ':');\n  }\n\n}\n\nexport default CustomFunctionAction;","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/actions/customFunction/CustomFunctionAction.js"],"names":["base64Encode","Action","QualifierValue","Qualifier","CustomFunctionAction","constructor","fn","encodeCustomFunctionString","encodedSource","asWasm","mode","asRemote","prepareQualifiers","encodedFn","addQualifier","pre","toString","replace"],"mappings":"AAAA,SAASA,YAAT,QAA6B,sCAA7B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAN,SAAmCH,MAAnC,CAA0C;AACtC;AACJ;AACA;AACA;AACII,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ;AACA,SAAKA,EAAL,GAAUA,EAAV;AACH;;AACDC,EAAAA,0BAA0B,CAACD,EAAD,EAAK;AAC3B,UAAME,aAAa,GAAGR,YAAY,CAACM,EAAD,CAAlC;AACA,WAAOE,aAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,MAAM,GAAG;AACL,SAAKC,IAAL,GAAY,MAAZ;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,SAAKD,IAAL,GAAY,QAAZ;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,SAAL,GAAiB,KAAKP,EAAtB;;AACA,QAAI,KAAKI,IAAL,KAAc,QAAlB,EAA4B;AACxB,WAAKG,SAAL,GAAiB,KAAKN,0BAAL,CAAgC,KAAKD,EAArC,CAAjB;AACH;;AACD,WAAO,KAAKQ,YAAL,CAAkB,IAAIX,SAAJ,CAAc,IAAd,EAAoB,IAAID,cAAJ,CAAmB,CAAC,KAAKa,GAAN,EAAW,KAAKL,IAAhB,EAAsB,KAAKG,SAA3B,CAAnB,CAApB,CAAlB,CAAP;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP,WAAO,MAAMA,QAAN,GACFC,OADE,CACM,KADN,EACa,GADb,CAAP;AAEH;;AAvCqC;;AAyC1C,eAAeb,oBAAf","sourcesContent":["import { base64Encode } from \"../../internal/utils/base64Encode.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @memberOf Actions.CustomFunction\r\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\r\n */\r\nclass CustomFunctionAction extends Action {\r\n    /**\r\n     *\r\n     * @param {string} fn The custom function to use, can be a URL or a publicID\r\n     */\r\n    constructor(fn) {\r\n        super();\r\n        this.fn = fn;\r\n    }\r\n    encodeCustomFunctionString(fn) {\r\n        const encodedSource = base64Encode(fn);\r\n        return encodedSource;\r\n    }\r\n    /**\r\n     * Use a WASM as a custom function,\r\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\r\n     */\r\n    asWasm() {\r\n        this.mode = 'wasm';\r\n        return this;\r\n    }\r\n    /**\r\n     * Use a remote URL as a custom function\r\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\r\n     */\r\n    asRemote() {\r\n        this.mode = 'remote';\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        this.encodedFn = this.fn;\r\n        if (this.mode === 'remote') {\r\n            this.encodedFn = this.encodeCustomFunctionString(this.fn);\r\n        }\r\n        return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\r\n    }\r\n    toString() {\r\n        return super.toString()\r\n            .replace(/\\//g, ':');\r\n    }\r\n}\r\nexport default CustomFunctionAction;\r\n"]},"metadata":{},"sourceType":"module"}