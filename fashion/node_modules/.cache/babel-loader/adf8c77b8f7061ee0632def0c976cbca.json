{"ast":null,"code":"import Expression from './expression.js';\n/**\r\n * Represents a transformation condition.\r\n * @param {string} conditionStr - a condition in string format\r\n * @class Condition\r\n * @example\r\n * // normally this class is not instantiated directly\r\n * var tr = cloudinary.Transformation.new()\r\n *    .if().width( \">\", 1000).and().aspectRatio(\"<\", \"3:4\").then()\r\n *      .width(1000)\r\n *      .crop(\"scale\")\r\n *    .else()\r\n *      .width(500)\r\n *      .crop(\"scale\")\r\n *\r\n * var tr = cloudinary.Transformation.new()\r\n *    .if(\"w > 1000 and aspectRatio < 3:4\")\r\n *      .width(1000)\r\n *      .crop(\"scale\")\r\n *    .else()\r\n *      .width(500)\r\n *      .crop(\"scale\")\r\n *\r\n */\n\nclass Condition extends Expression {\n  constructor(conditionStr) {\n    super(conditionStr);\n  }\n  /**\r\n   * @function Condition#height\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  height(operator, value) {\n    return this.predicate(\"h\", operator, value);\n  }\n  /**\r\n   * @function Condition#width\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  width(operator, value) {\n    return this.predicate(\"w\", operator, value);\n  }\n  /**\r\n   * @function Condition#aspectRatio\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  aspectRatio(operator, value) {\n    return this.predicate(\"ar\", operator, value);\n  }\n  /**\r\n   * @function Condition#pages\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  pageCount(operator, value) {\n    return this.predicate(\"pc\", operator, value);\n  }\n  /**\r\n   * @function Condition#faces\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  faceCount(operator, value) {\n    return this.predicate(\"fc\", operator, value);\n  }\n  /**\r\n   * @function Condition#duration\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  duration(operator, value) {\n    return this.predicate(\"du\", operator, value);\n  }\n  /**\r\n   * @function Condition#initialDuration\r\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n   * @param {string|number} value the right hand side value\r\n   * @return {Condition} this condition\r\n   */\n\n\n  initialDuration(operator, value) {\n    return this.predicate(\"idu\", operator, value);\n  }\n\n}\n\nexport default Condition;","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/backwards/condition.js"],"names":["Expression","Condition","constructor","conditionStr","height","operator","value","predicate","width","aspectRatio","pageCount","faceCount","duration","initialDuration"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBD,UAAxB,CAAmC;AAC/BE,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,UAAMA,YAAN;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACpB,WAAO,KAAKC,SAAL,CAAe,GAAf,EAAoBF,QAApB,EAA8BC,KAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,KAAK,CAACH,QAAD,EAAWC,KAAX,EAAkB;AACnB,WAAO,KAAKC,SAAL,CAAe,GAAf,EAAoBF,QAApB,EAA8BC,KAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,WAAW,CAACJ,QAAD,EAAWC,KAAX,EAAkB;AACzB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,SAAS,CAACL,QAAD,EAAWC,KAAX,EAAkB;AACvB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,SAAS,CAACN,QAAD,EAAWC,KAAX,EAAkB;AACvB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,QAAQ,CAACP,QAAD,EAAWC,KAAX,EAAkB;AACtB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,eAAe,CAACR,QAAD,EAAWC,KAAX,EAAkB;AAC7B,WAAO,KAAKC,SAAL,CAAe,KAAf,EAAsBF,QAAtB,EAAgCC,KAAhC,CAAP;AACH;;AAlE8B;;AAoEnC,eAAeL,SAAf","sourcesContent":["import Expression from './expression.js';\r\n/**\r\n * Represents a transformation condition.\r\n * @param {string} conditionStr - a condition in string format\r\n * @class Condition\r\n * @example\r\n * // normally this class is not instantiated directly\r\n * var tr = cloudinary.Transformation.new()\r\n *    .if().width( \">\", 1000).and().aspectRatio(\"<\", \"3:4\").then()\r\n *      .width(1000)\r\n *      .crop(\"scale\")\r\n *    .else()\r\n *      .width(500)\r\n *      .crop(\"scale\")\r\n *\r\n * var tr = cloudinary.Transformation.new()\r\n *    .if(\"w > 1000 and aspectRatio < 3:4\")\r\n *      .width(1000)\r\n *      .crop(\"scale\")\r\n *    .else()\r\n *      .width(500)\r\n *      .crop(\"scale\")\r\n *\r\n */\r\nclass Condition extends Expression {\r\n    constructor(conditionStr) {\r\n        super(conditionStr);\r\n    }\r\n    /**\r\n     * @function Condition#height\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    height(operator, value) {\r\n        return this.predicate(\"h\", operator, value);\r\n    }\r\n    /**\r\n     * @function Condition#width\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    width(operator, value) {\r\n        return this.predicate(\"w\", operator, value);\r\n    }\r\n    /**\r\n     * @function Condition#aspectRatio\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    aspectRatio(operator, value) {\r\n        return this.predicate(\"ar\", operator, value);\r\n    }\r\n    /**\r\n     * @function Condition#pages\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    pageCount(operator, value) {\r\n        return this.predicate(\"pc\", operator, value);\r\n    }\r\n    /**\r\n     * @function Condition#faces\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    faceCount(operator, value) {\r\n        return this.predicate(\"fc\", operator, value);\r\n    }\r\n    /**\r\n     * @function Condition#duration\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    duration(operator, value) {\r\n        return this.predicate(\"du\", operator, value);\r\n    }\r\n    /**\r\n     * @function Condition#initialDuration\r\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\r\n     * @param {string|number} value the right hand side value\r\n     * @return {Condition} this condition\r\n     */\r\n    initialDuration(operator, value) {\r\n        return this.predicate(\"idu\", operator, value);\r\n    }\r\n}\r\nexport default Condition;\r\n"]},"metadata":{},"sourceType":"module"}