{"ast":null,"code":"import { autoGravity, focusOn } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue, ocr } from \"../../qualifiers/focusOn.js\";\nimport { AutoFocus } from \"../../qualifiers/autoFocus.js\";\nimport { CompassGravity } from \"../../qualifiers/gravity/compassGravity/CompassGravity.js\";\nimport { CompassQualifier } from \"../../qualifiers/gravity/qualifiers/compass/CompassQualifier.js\";\n/**\r\n * Validates that gravityModel is an ICompassGravityModel\r\n * @param gravityModel\r\n */\n\nfunction isCompassGravityModel(gravityModel) {\n  return gravityModel.gravityType === 'direction';\n}\n/**\r\n * Validates that gravityModel is an IOcrGravityModel\r\n * @param gravityModel\r\n */\n\n\nfunction isOcrGravityModel(gravityModel) {\n  return gravityModel.gravityType === 'ocr';\n}\n/**\r\n * Validates that gravityModel is an IAutoGravityModel\r\n * @param gravityModel\r\n */\n\n\nfunction isAutoGravityModel(gravityModel) {\n  return gravityModel.gravityType === 'auto';\n}\n/**\r\n * Create AutoFocus from IAutoGravityObjectModel\r\n * @param autoGravityObjectModel\r\n */\n\n\nfunction createAutoFocusFromModel(autoGravityObjectModel) {\n  const {\n    object,\n    weight,\n    avoid\n  } = autoGravityObjectModel;\n  const autoFocus = new AutoFocus(new FocusOnValue(object));\n  (weight || weight === 0) && autoFocus.weight(weight);\n  avoid && autoFocus.avoid();\n  return autoFocus;\n}\n/**\r\n * Create AutoGravity from IAutoGravityModel\r\n * @param gravityModel\r\n */\n\n\nfunction createAutoGravityFromModel(gravityModel) {\n  const autoFocusModel = gravityModel.autoFocus || [];\n  const autoFocus = autoFocusModel.map(createAutoFocusFromModel);\n  return autoGravity().autoFocus(...autoFocus);\n}\n/**\r\n * Create FocusOnGravity from given IFocusOnGravityModel\r\n * @param gravityModel\r\n */\n\n\nfunction createFocusOnGravityFromModel(gravityModel) {\n  const focusOnObjects = (gravityModel.focusOnObjects || []).map(str => new FocusOnValue(str));\n  const result = focusOn(...focusOnObjects);\n\n  if (gravityModel.fallbackGravity) {\n    const autoGravity = createAutoGravityFromModel(gravityModel.fallbackGravity);\n    result.fallbackGravity(autoGravity);\n  }\n\n  return result;\n}\n/**\r\n * Create gravity instance from given gravity model\r\n * @param gravityModel\r\n */\n\n\nfunction createGravityFromModel(gravityModel) {\n  if (isCompassGravityModel(gravityModel)) {\n    return new CompassGravity(new CompassQualifier(gravityModel.compass));\n  }\n\n  if (isOcrGravityModel(gravityModel)) {\n    return focusOn(ocr());\n  }\n\n  if (isAutoGravityModel(gravityModel)) {\n    return createAutoGravityFromModel(gravityModel);\n  }\n\n  return createFocusOnGravityFromModel(gravityModel);\n}\n\nexport { createGravityFromModel };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/internal/models/createGravityFromModel.js"],"names":["autoGravity","focusOn","FocusOnValue","ocr","AutoFocus","CompassGravity","CompassQualifier","isCompassGravityModel","gravityModel","gravityType","isOcrGravityModel","isAutoGravityModel","createAutoFocusFromModel","autoGravityObjectModel","object","weight","avoid","autoFocus","createAutoGravityFromModel","autoFocusModel","map","createFocusOnGravityFromModel","focusOnObjects","str","result","fallbackGravity","createGravityFromModel","compass"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,6BAArC;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,6BAAlC;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,cAAT,QAA+B,2DAA/B;AACA,SAASC,gBAAT,QAAiC,iEAAjC;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,YAA/B,EAA6C;AACzC,SAAOA,YAAY,CAACC,WAAb,KAA6B,WAApC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BF,YAA3B,EAAyC;AACrC,SAAOA,YAAY,CAACC,WAAb,KAA6B,KAApC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA4BH,YAA5B,EAA0C;AACtC,SAAOA,YAAY,CAACC,WAAb,KAA6B,MAApC;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASG,wBAAT,CAAkCC,sBAAlC,EAA0D;AACtD,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA4BH,sBAAlC;AACA,QAAMI,SAAS,GAAG,IAAIb,SAAJ,CAAc,IAAIF,YAAJ,CAAiBY,MAAjB,CAAd,CAAlB;AACA,GAACC,MAAM,IAAIA,MAAM,KAAK,CAAtB,KAA4BE,SAAS,CAACF,MAAV,CAAiBA,MAAjB,CAA5B;AACAC,EAAAA,KAAK,IAAIC,SAAS,CAACD,KAAV,EAAT;AACA,SAAOC,SAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,0BAAT,CAAoCV,YAApC,EAAkD;AAC9C,QAAMW,cAAc,GAAGX,YAAY,CAACS,SAAb,IAA0B,EAAjD;AACA,QAAMA,SAAS,GAAGE,cAAc,CAACC,GAAf,CAAmBR,wBAAnB,CAAlB;AACA,SAAOZ,WAAW,GAAGiB,SAAd,CAAwB,GAAGA,SAA3B,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASI,6BAAT,CAAuCb,YAAvC,EAAqD;AACjD,QAAMc,cAAc,GAAG,CAACd,YAAY,CAACc,cAAb,IAA+B,EAAhC,EAAoCF,GAApC,CAAyCG,GAAD,IAAS,IAAIrB,YAAJ,CAAiBqB,GAAjB,CAAjD,CAAvB;AACA,QAAMC,MAAM,GAAGvB,OAAO,CAAC,GAAGqB,cAAJ,CAAtB;;AACA,MAAId,YAAY,CAACiB,eAAjB,EAAkC;AAC9B,UAAMzB,WAAW,GAAGkB,0BAA0B,CAACV,YAAY,CAACiB,eAAd,CAA9C;AACAD,IAAAA,MAAM,CAACC,eAAP,CAAuBzB,WAAvB;AACH;;AACD,SAAOwB,MAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASE,sBAAT,CAAgClB,YAAhC,EAA8C;AAC1C,MAAID,qBAAqB,CAACC,YAAD,CAAzB,EAAyC;AACrC,WAAO,IAAIH,cAAJ,CAAmB,IAAIC,gBAAJ,CAAqBE,YAAY,CAACmB,OAAlC,CAAnB,CAAP;AACH;;AACD,MAAIjB,iBAAiB,CAACF,YAAD,CAArB,EAAqC;AACjC,WAAOP,OAAO,CAACE,GAAG,EAAJ,CAAd;AACH;;AACD,MAAIQ,kBAAkB,CAACH,YAAD,CAAtB,EAAsC;AAClC,WAAOU,0BAA0B,CAACV,YAAD,CAAjC;AACH;;AACD,SAAOa,6BAA6B,CAACb,YAAD,CAApC;AACH;;AACD,SAASkB,sBAAT","sourcesContent":["import { autoGravity, focusOn } from \"../../qualifiers/gravity.js\";\r\nimport { FocusOnValue, ocr } from \"../../qualifiers/focusOn.js\";\r\nimport { AutoFocus } from \"../../qualifiers/autoFocus.js\";\r\nimport { CompassGravity } from \"../../qualifiers/gravity/compassGravity/CompassGravity.js\";\r\nimport { CompassQualifier } from \"../../qualifiers/gravity/qualifiers/compass/CompassQualifier.js\";\r\n/**\r\n * Validates that gravityModel is an ICompassGravityModel\r\n * @param gravityModel\r\n */\r\nfunction isCompassGravityModel(gravityModel) {\r\n    return gravityModel.gravityType === 'direction';\r\n}\r\n/**\r\n * Validates that gravityModel is an IOcrGravityModel\r\n * @param gravityModel\r\n */\r\nfunction isOcrGravityModel(gravityModel) {\r\n    return gravityModel.gravityType === 'ocr';\r\n}\r\n/**\r\n * Validates that gravityModel is an IAutoGravityModel\r\n * @param gravityModel\r\n */\r\nfunction isAutoGravityModel(gravityModel) {\r\n    return gravityModel.gravityType === 'auto';\r\n}\r\n/**\r\n * Create AutoFocus from IAutoGravityObjectModel\r\n * @param autoGravityObjectModel\r\n */\r\nfunction createAutoFocusFromModel(autoGravityObjectModel) {\r\n    const { object, weight, avoid } = autoGravityObjectModel;\r\n    const autoFocus = new AutoFocus(new FocusOnValue(object));\r\n    (weight || weight === 0) && autoFocus.weight(weight);\r\n    avoid && autoFocus.avoid();\r\n    return autoFocus;\r\n}\r\n/**\r\n * Create AutoGravity from IAutoGravityModel\r\n * @param gravityModel\r\n */\r\nfunction createAutoGravityFromModel(gravityModel) {\r\n    const autoFocusModel = gravityModel.autoFocus || [];\r\n    const autoFocus = autoFocusModel.map(createAutoFocusFromModel);\r\n    return autoGravity().autoFocus(...autoFocus);\r\n}\r\n/**\r\n * Create FocusOnGravity from given IFocusOnGravityModel\r\n * @param gravityModel\r\n */\r\nfunction createFocusOnGravityFromModel(gravityModel) {\r\n    const focusOnObjects = (gravityModel.focusOnObjects || []).map((str) => new FocusOnValue(str));\r\n    const result = focusOn(...focusOnObjects);\r\n    if (gravityModel.fallbackGravity) {\r\n        const autoGravity = createAutoGravityFromModel(gravityModel.fallbackGravity);\r\n        result.fallbackGravity(autoGravity);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create gravity instance from given gravity model\r\n * @param gravityModel\r\n */\r\nfunction createGravityFromModel(gravityModel) {\r\n    if (isCompassGravityModel(gravityModel)) {\r\n        return new CompassGravity(new CompassQualifier(gravityModel.compass));\r\n    }\r\n    if (isOcrGravityModel(gravityModel)) {\r\n        return focusOn(ocr());\r\n    }\r\n    if (isAutoGravityModel(gravityModel)) {\r\n        return createAutoGravityFromModel(gravityModel);\r\n    }\r\n    return createFocusOnGravityFromModel(gravityModel);\r\n}\r\nexport { createGravityFromModel };\r\n"]},"metadata":{},"sourceType":"module"}