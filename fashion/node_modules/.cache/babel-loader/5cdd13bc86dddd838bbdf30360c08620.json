{"ast":null,"code":"/**\r\n * @description Determines how to crop, scale, and/or zoom the delivered asset according to the requested dimensions.\r\n * @memberOf Actions\r\n * @namespace Resize\r\n * @see Learn more about Gravity and Focus {@link Qualifiers.Gravity| here }\r\n * @example\r\n * <caption> <h4>Scaling an image</h4> </caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {scale, fit, pad, crop} from '@cloudinary/url-gen/actions/resize';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.resize( scale(100, 100) );\r\n * // All resize actions have a similar interface.\r\n * // image.resize( fit(100, 100)) );\r\n * // image.resize( pad(100, 100)) );\r\n * // image.resize( crop(100, 100)) );\r\n * // However, Some actions have additional arguments exposed as builder methods.\r\n * // See the documentation for each method for more information\r\n *\r\n *\r\n * // Alternative syntax, using builder methods\r\n * image.resize(\r\n *  scale()\r\n *    .width(100)\r\n *    .height(100)\r\n * );\r\n * image.toURL()\r\n *\r\n * @example\r\n * <caption> <h4>Cropping with automatic focus(Gravity)</h4> </caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * import {scale} from '@cloudinary/url-gen/actions/resize';\r\n * import {autoGravity} from '@cloudinary/url-gen/qualifiers/gravity';\r\n *\r\n * image.resize( crop(100, 100).gravity(autoGravity()) );\r\n *\r\n * // Alternative syntax, using builder methods\r\n * image.resize(\r\n *  scale()\r\n *    .width(100)\r\n *    .height(100)\r\n *    .gravity(autoGravity())\r\n * );\r\n * image.toURL()\r\n */\nimport { ResizePadAction } from \"./resize/ResizePadAction.js\";\nimport { ResizeSimpleAction } from \"./resize/ResizeSimpleAction.js\";\nimport { ResizeScaleAction } from \"./resize/ResizeScaleAction.js\";\nimport { ThumbResizeAction } from \"./resize/ThumbnailAction.js\";\nimport { ResizeCropAction } from \"./resize/ResizeCropAction.js\";\nimport { ResizeFillAction } from \"./resize/ResizeFillAction.js\";\nimport { ResizeLimitFitAction } from \"./resize/ResizeLimitFitAction.js\";\nimport { ResizeLimitFillAction } from \"./resize/ResizeLimitFillAction.js\";\nimport { ResizeLimitPadAction } from \"./resize/ResizeLimitPadAction.js\";\nimport { ResizeMinimumPadAction } from \"./resize/ResizeMinimumPadAction.js\";\n/**\r\n * @summary action\r\n * @description\r\n * Changes the size of the image exactly to the given width and height without necessarily retaining the original aspect ratio:<br/>\r\n * all original image parts are visible but might be stretched or shrunk.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ScaleAction}\r\n */\n\nfunction scale(width, height) {\n  return new ResizeScaleAction('scale', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Scales your image based on automatically calculated areas of interest within each specific photo.\r\n *\r\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_scale_images|add-on documentation}.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\n\n\nfunction imaggaScale(width, height) {\n  return new ResizeSimpleAction('imagga_scale', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Crops your image based on automatically calculated areas of interest within each specific photo.\r\n *\r\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_crop_images|add-on documentation}.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\n\n\nfunction imaggaCrop(width, height) {\n  return new ResizeSimpleAction('imagga_crop', width, height);\n}\n/**\r\n * @summary action\r\n * @description Extracts a region of the given width and height out of the original image.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeCropAction}\r\n */\n\n\nfunction crop(width, height) {\n  return new ResizeCropAction('crop', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Creates an image with the exact given width and height without distorting the image.<br/>\r\n * This option first scales up or down as much as needed to at least fill both of the given dimensions.<br/><br/>\r\n * If the requested aspect ratio is different than the original, cropping will occur on the dimension that exceeds the requested size after scaling.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeFillAction}\r\n */\n\n\nfunction fill(width, height) {\n  return new ResizeFillAction('fill', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * The image is resized so that it takes up as much space as possible within a bounding box defined by the given width and height parameters.</br>\r\n * The original aspect ratio is retained and all of the original image is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\n\n\nfunction fit(width, height) {\n  return new ResizeSimpleAction('fit', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio.\r\n *\r\n * If the proportions of the original asset do not match the given width and height, padding is added to the asset\r\n * to reach the required size.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\n\n\nfunction pad(width, height) {\n  return new ResizePadAction('pad', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Creates an asset with the exact given width and height without distorting the asset, but only if the original\r\n * asset is larger than the specified resolution limits.\r\n *\r\n * The asset is scaled down to fill the given width and height without distorting the asset, and then the dimension\r\n * that exceeds the request is cropped. If the original dimensions are both smaller than the requested size, it is\r\n * not resized at all.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeLimitFillAction}\r\n */\n\n\nfunction limitFill(width, height) {\n  return new ResizeLimitFillAction('lfill', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\r\n * width and height parameters, but only if the original asset is larger than the given limit (width and height).\r\n *\r\n * The asset is scaled down, the original aspect ratio is retained and all of the original asset is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\n\n\nfunction limitFit(width, height) {\n  return new ResizeLimitFitAction('limit', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\r\n * original asset is smaller than the given minimum (width and height).\r\n *\r\n * The asset is scaled up.  If the proportions of the original asset do not match the given width and height,\r\n * padding is added to the asset to reach the required size.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\n\n\nfunction minimumPad(width, height) {\n  return new ResizeMinimumPadAction('mpad', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\r\n * width and height parameters, but only if the original asset is smaller than the given minimum (width and height).\r\n *\r\n * The asset is scaled up, the original aspect ratio is retained and all of the original asset is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\n\n\nfunction minimumFit(width, height) {\n  return new ResizeSimpleAction('mfit', width, height);\n}\n/**\r\n * @summary action\r\n * @memberOf Actions.Resize\r\n * @description\r\n * Tries to prevent a \"bad crop\" by first attempting to use the fill mode, but adding padding if it is determined\r\n * that more of the original image needs to be included in the final image.\r\n *\r\n * Especially useful if the aspect ratio of the delivered image is considerably different from the original's\r\n * aspect ratio.\r\n *\r\n * Only supported in conjunction with Automatic cropping.\r\n *\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\n\n\nfunction fillPad(width, height) {\n  return new ResizePadAction('fill_pad', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * The thumb cropping mode is specifically used for creating image thumbnails from either face or custom coordinates,</br>\r\n * and must always be accompanied by the gravity parameter set to one of the face detection or custom values.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ThumbResizeAction}\r\n */\n\n\nfunction thumbnail(width, height) {\n  return new ThumbResizeAction('thumb', width, height);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\r\n * original asset is larger than the given limit (width and height).\r\n *\r\n * The asset is scaled down.  If the proportions of the original asset do not match the given width and height,\r\n * padding is added to the asset to reach the required size.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\n\n\nfunction limitPad(width, height) {\n  return new ResizeLimitPadAction('lpad', width, height);\n}\n\nconst Resize = {\n  imaggaScale,\n  imaggaCrop,\n  crop,\n  fill,\n  scale,\n  minimumPad,\n  fit,\n  pad,\n  limitFit,\n  thumbnail,\n  limitFill,\n  minimumFit,\n  limitPad,\n  fillPad\n};\nexport { Resize, imaggaScale, imaggaCrop, crop, fill, scale, minimumPad, fit, pad, limitFit, thumbnail, limitFill, minimumFit, limitPad, fillPad };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/actions/resize.js"],"names":["ResizePadAction","ResizeSimpleAction","ResizeScaleAction","ThumbResizeAction","ResizeCropAction","ResizeFillAction","ResizeLimitFitAction","ResizeLimitFillAction","ResizeLimitPadAction","ResizeMinimumPadAction","scale","width","height","imaggaScale","imaggaCrop","crop","fill","fit","pad","limitFill","limitFit","minimumPad","minimumFit","fillPad","thumbnail","limitPad","Resize"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AAC1B,SAAO,IAAIV,iBAAJ,CAAsB,OAAtB,EAA+BS,KAA/B,EAAsCC,MAAtC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBF,KAArB,EAA4BC,MAA5B,EAAoC;AAChC,SAAO,IAAIX,kBAAJ,CAAuB,cAAvB,EAAuCU,KAAvC,EAA8CC,MAA9C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBH,KAApB,EAA2BC,MAA3B,EAAmC;AAC/B,SAAO,IAAIX,kBAAJ,CAAuB,aAAvB,EAAsCU,KAAtC,EAA6CC,MAA7C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,IAAT,CAAcJ,KAAd,EAAqBC,MAArB,EAA6B;AACzB,SAAO,IAAIR,gBAAJ,CAAqB,MAArB,EAA6BO,KAA7B,EAAoCC,MAApC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,IAAT,CAAcL,KAAd,EAAqBC,MAArB,EAA6B;AACzB,SAAO,IAAIP,gBAAJ,CAAqB,MAArB,EAA6BM,KAA7B,EAAoCC,MAApC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,GAAT,CAAaN,KAAb,EAAoBC,MAApB,EAA4B;AACxB,SAAO,IAAIX,kBAAJ,CAAuB,KAAvB,EAA8BU,KAA9B,EAAqCC,MAArC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,GAAT,CAAaP,KAAb,EAAoBC,MAApB,EAA4B;AACxB,SAAO,IAAIZ,eAAJ,CAAoB,KAApB,EAA2BW,KAA3B,EAAkCC,MAAlC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,SAAT,CAAmBR,KAAnB,EAA0BC,MAA1B,EAAkC;AAC9B,SAAO,IAAIL,qBAAJ,CAA0B,OAA1B,EAAmCI,KAAnC,EAA0CC,MAA1C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,QAAT,CAAkBT,KAAlB,EAAyBC,MAAzB,EAAiC;AAC7B,SAAO,IAAIN,oBAAJ,CAAyB,OAAzB,EAAkCK,KAAlC,EAAyCC,MAAzC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,UAAT,CAAoBV,KAApB,EAA2BC,MAA3B,EAAmC;AAC/B,SAAO,IAAIH,sBAAJ,CAA2B,MAA3B,EAAmCE,KAAnC,EAA0CC,MAA1C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,UAAT,CAAoBX,KAApB,EAA2BC,MAA3B,EAAmC;AAC/B,SAAO,IAAIX,kBAAJ,CAAuB,MAAvB,EAA+BU,KAA/B,EAAsCC,MAAtC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,OAAT,CAAiBZ,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5B,SAAO,IAAIZ,eAAJ,CAAoB,UAApB,EAAgCW,KAAhC,EAAuCC,MAAvC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,SAAT,CAAmBb,KAAnB,EAA0BC,MAA1B,EAAkC;AAC9B,SAAO,IAAIT,iBAAJ,CAAsB,OAAtB,EAA+BQ,KAA/B,EAAsCC,MAAtC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,QAAT,CAAkBd,KAAlB,EAAyBC,MAAzB,EAAiC;AAC7B,SAAO,IAAIJ,oBAAJ,CAAyB,MAAzB,EAAiCG,KAAjC,EAAwCC,MAAxC,CAAP;AACH;;AACD,MAAMc,MAAM,GAAG;AACXb,EAAAA,WADW;AAEXC,EAAAA,UAFW;AAGXC,EAAAA,IAHW;AAIXC,EAAAA,IAJW;AAKXN,EAAAA,KALW;AAMXW,EAAAA,UANW;AAOXJ,EAAAA,GAPW;AAQXC,EAAAA,GARW;AASXE,EAAAA,QATW;AAUXI,EAAAA,SAVW;AAWXL,EAAAA,SAXW;AAYXG,EAAAA,UAZW;AAaXG,EAAAA,QAbW;AAcXF,EAAAA;AAdW,CAAf;AAgBA,SAASG,MAAT,EAAiBb,WAAjB,EAA8BC,UAA9B,EAA0CC,IAA1C,EAAgDC,IAAhD,EAAsDN,KAAtD,EAA6DW,UAA7D,EAAyEJ,GAAzE,EAA8EC,GAA9E,EAAmFE,QAAnF,EAA6FI,SAA7F,EAAwGL,SAAxG,EAAmHG,UAAnH,EAA+HG,QAA/H,EAAyIF,OAAzI","sourcesContent":["/**\r\n * @description Determines how to crop, scale, and/or zoom the delivered asset according to the requested dimensions.\r\n * @memberOf Actions\r\n * @namespace Resize\r\n * @see Learn more about Gravity and Focus {@link Qualifiers.Gravity| here }\r\n * @example\r\n * <caption> <h4>Scaling an image</h4> </caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {scale, fit, pad, crop} from '@cloudinary/url-gen/actions/resize';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.resize( scale(100, 100) );\r\n * // All resize actions have a similar interface.\r\n * // image.resize( fit(100, 100)) );\r\n * // image.resize( pad(100, 100)) );\r\n * // image.resize( crop(100, 100)) );\r\n * // However, Some actions have additional arguments exposed as builder methods.\r\n * // See the documentation for each method for more information\r\n *\r\n *\r\n * // Alternative syntax, using builder methods\r\n * image.resize(\r\n *  scale()\r\n *    .width(100)\r\n *    .height(100)\r\n * );\r\n * image.toURL()\r\n *\r\n * @example\r\n * <caption> <h4>Cropping with automatic focus(Gravity)</h4> </caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * import {scale} from '@cloudinary/url-gen/actions/resize';\r\n * import {autoGravity} from '@cloudinary/url-gen/qualifiers/gravity';\r\n *\r\n * image.resize( crop(100, 100).gravity(autoGravity()) );\r\n *\r\n * // Alternative syntax, using builder methods\r\n * image.resize(\r\n *  scale()\r\n *    .width(100)\r\n *    .height(100)\r\n *    .gravity(autoGravity())\r\n * );\r\n * image.toURL()\r\n */\r\nimport { ResizePadAction } from \"./resize/ResizePadAction.js\";\r\nimport { ResizeSimpleAction } from \"./resize/ResizeSimpleAction.js\";\r\nimport { ResizeScaleAction } from \"./resize/ResizeScaleAction.js\";\r\nimport { ThumbResizeAction } from \"./resize/ThumbnailAction.js\";\r\nimport { ResizeCropAction } from \"./resize/ResizeCropAction.js\";\r\nimport { ResizeFillAction } from \"./resize/ResizeFillAction.js\";\r\nimport { ResizeLimitFitAction } from \"./resize/ResizeLimitFitAction.js\";\r\nimport { ResizeLimitFillAction } from \"./resize/ResizeLimitFillAction.js\";\r\nimport { ResizeLimitPadAction } from \"./resize/ResizeLimitPadAction.js\";\r\nimport { ResizeMinimumPadAction } from \"./resize/ResizeMinimumPadAction.js\";\r\n/**\r\n * @summary action\r\n * @description\r\n * Changes the size of the image exactly to the given width and height without necessarily retaining the original aspect ratio:<br/>\r\n * all original image parts are visible but might be stretched or shrunk.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ScaleAction}\r\n */\r\nfunction scale(width, height) {\r\n    return new ResizeScaleAction('scale', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Scales your image based on automatically calculated areas of interest within each specific photo.\r\n *\r\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_scale_images|add-on documentation}.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction imaggaScale(width, height) {\r\n    return new ResizeSimpleAction('imagga_scale', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Crops your image based on automatically calculated areas of interest within each specific photo.\r\n *\r\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_crop_images|add-on documentation}.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction imaggaCrop(width, height) {\r\n    return new ResizeSimpleAction('imagga_crop', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description Extracts a region of the given width and height out of the original image.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeCropAction}\r\n */\r\nfunction crop(width, height) {\r\n    return new ResizeCropAction('crop', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Creates an image with the exact given width and height without distorting the image.<br/>\r\n * This option first scales up or down as much as needed to at least fill both of the given dimensions.<br/><br/>\r\n * If the requested aspect ratio is different than the original, cropping will occur on the dimension that exceeds the requested size after scaling.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeFillAction}\r\n */\r\nfunction fill(width, height) {\r\n    return new ResizeFillAction('fill', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * The image is resized so that it takes up as much space as possible within a bounding box defined by the given width and height parameters.</br>\r\n * The original aspect ratio is retained and all of the original image is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction fit(width, height) {\r\n    return new ResizeSimpleAction('fit', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio.\r\n *\r\n * If the proportions of the original asset do not match the given width and height, padding is added to the asset\r\n * to reach the required size.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction pad(width, height) {\r\n    return new ResizePadAction('pad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Creates an asset with the exact given width and height without distorting the asset, but only if the original\r\n * asset is larger than the specified resolution limits.\r\n *\r\n * The asset is scaled down to fill the given width and height without distorting the asset, and then the dimension\r\n * that exceeds the request is cropped. If the original dimensions are both smaller than the requested size, it is\r\n * not resized at all.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeLimitFillAction}\r\n */\r\nfunction limitFill(width, height) {\r\n    return new ResizeLimitFillAction('lfill', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\r\n * width and height parameters, but only if the original asset is larger than the given limit (width and height).\r\n *\r\n * The asset is scaled down, the original aspect ratio is retained and all of the original asset is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction limitFit(width, height) {\r\n    return new ResizeLimitFitAction('limit', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\r\n * original asset is smaller than the given minimum (width and height).\r\n *\r\n * The asset is scaled up.  If the proportions of the original asset do not match the given width and height,\r\n * padding is added to the asset to reach the required size.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction minimumPad(width, height) {\r\n    return new ResizeMinimumPadAction('mpad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\r\n * width and height parameters, but only if the original asset is smaller than the given minimum (width and height).\r\n *\r\n * The asset is scaled up, the original aspect ratio is retained and all of the original asset is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction minimumFit(width, height) {\r\n    return new ResizeSimpleAction('mfit', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Resize\r\n * @description\r\n * Tries to prevent a \"bad crop\" by first attempting to use the fill mode, but adding padding if it is determined\r\n * that more of the original image needs to be included in the final image.\r\n *\r\n * Especially useful if the aspect ratio of the delivered image is considerably different from the original's\r\n * aspect ratio.\r\n *\r\n * Only supported in conjunction with Automatic cropping.\r\n *\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction fillPad(width, height) {\r\n    return new ResizePadAction('fill_pad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * The thumb cropping mode is specifically used for creating image thumbnails from either face or custom coordinates,</br>\r\n * and must always be accompanied by the gravity parameter set to one of the face detection or custom values.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ThumbResizeAction}\r\n */\r\nfunction thumbnail(width, height) {\r\n    return new ThumbResizeAction('thumb', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\r\n * original asset is larger than the given limit (width and height).\r\n *\r\n * The asset is scaled down.  If the proportions of the original asset do not match the given width and height,\r\n * padding is added to the asset to reach the required size.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction limitPad(width, height) {\r\n    return new ResizeLimitPadAction('lpad', width, height);\r\n}\r\nconst Resize = {\r\n    imaggaScale,\r\n    imaggaCrop,\r\n    crop,\r\n    fill,\r\n    scale,\r\n    minimumPad,\r\n    fit,\r\n    pad,\r\n    limitFit,\r\n    thumbnail,\r\n    limitFill,\r\n    minimumFit,\r\n    limitPad,\r\n    fillPad\r\n};\r\nexport { Resize, imaggaScale, imaggaCrop, crop, fill, scale, minimumPad, fit, pad, limitFit, thumbnail, limitFill, minimumFit, limitPad, fillPad };\r\n"]},"metadata":{},"sourceType":"module"}