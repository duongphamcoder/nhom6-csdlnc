{"ast":null,"code":"import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\r\n * @summary qualifier\r\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/image_transformations#adding_text_overlays|Adding text overlays to images}\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#adding_text_captions|Adding text overlays to videos}\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @see {@link Actions.Underlay| The underlay action}\r\n * @memberOf Qualifiers\r\n */\n\nclass TextStyle extends QualifierModel {\n  /**\r\n   * @param {string} fontFamily The font family\r\n   * @param {number | string} fontSize The font size\r\n   */\n  constructor(fontFamily, fontSize) {\n    super();\n\n    if (!fontFamily || !fontSize) {\n      throw `You must provide a fontFamily and fontSize to a TextStyle`;\n    }\n\n    this._qualifierModel.fontFamily = fontFamily;\n    this._qualifierModel.fontSize = fontSize;\n  }\n  /**\r\n   * @param {number} spacing The spacing between multiple lines in pixels.\r\n   */\n\n\n  lineSpacing(spacing) {\n    this._qualifierModel.lineSpacing = spacing;\n    return this;\n  }\n  /**\r\n   * @param spacing The spacing between the letters, in pixels.\r\n   */\n\n\n  letterSpacing(spacing) {\n    this._qualifierModel.letterSpacing = spacing;\n    return this;\n  }\n  /**\r\n   * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\r\n   * @param {FontAntialiasType|string} antiAlias\r\n   */\n\n\n  fontAntialias(antiAlias) {\n    this._qualifierModel.fontAntialias = antiAlias;\n    return this;\n  }\n  /**\r\n   * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\r\n   * For details on custom fonts, see {@link https://cloudinary.com/documentation/image_transformations#using_custom_fonts_for_text_overlays|Using custom fonts for text overlays}.\r\n   * @param {string} fontFamilyName\r\n   */\n\n\n  fontFamily(fontFamilyName) {\n    this._qualifierModel.fontFamily = fontFamilyName;\n    return this;\n  }\n  /**\r\n   * @param {number} fontSize The font size\r\n   */\n\n\n  fontSize(fontSize) {\n    this._qualifierModel.fontSize = fontSize;\n    return this;\n  }\n  /**\r\n   * @param {FontWeightType|string} fontWeight The font weight\r\n   */\n\n\n  fontWeight(fontWeight) {\n    this._qualifierModel.fontWeight = fontWeight;\n    return this;\n  }\n  /**\r\n   *\r\n   * @param {string} fontStyle The font style.\r\n   */\n\n\n  fontStyle(fontStyle) {\n    this._qualifierModel.fontStyle = fontStyle;\n    return this;\n  }\n  /**\r\n   * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\r\n   */\n\n\n  fontHinting(fontHinting) {\n    this._qualifierModel.fontHinting = fontHinting;\n    return this;\n  }\n  /**\r\n   *\r\n   * @param {TextDecorationType|string} textDecoration The font decoration type.\r\n   */\n\n\n  textDecoration(textDecoration) {\n    this._qualifierModel.textDecoration = textDecoration;\n    return this;\n  }\n  /**\r\n   * @param {TextAlignmentType|string} textAlignment The text alignment\r\n   */\n\n\n  textAlignment(textAlignment) {\n    this._qualifierModel.textAlignment = textAlignment;\n    return this;\n  }\n  /**\r\n   * @description Whether to include an outline stroke. Set the color and weight of the stroke\r\n   */\n\n\n  stroke(textStroke) {\n    if (textStroke) {\n      const strokeStyle = textStroke.split('_');\n      this._qualifierModel.stroke = {\n        width: +strokeStyle[1].replace('px', ''),\n        color: strokeStyle[strokeStyle.length - 1]\n      };\n    } else {\n      this._qualifierModel.stroke = true;\n    }\n\n    return this;\n  }\n\n  toString() {\n    const {\n      stroke\n    } = this._qualifierModel;\n    let strokeStr = '';\n\n    if (stroke) {\n      strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n    }\n\n    return [`${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`, this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight, this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle, this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration, this._qualifierModel.textAlignment, strokeStr, this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`, this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`, this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`, this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`].filter(a => a).join('_');\n  }\n\n}\n\nexport { TextStyle };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/qualifiers/textStyle.js"],"names":["normal","normalFontWeight","normalFontStyle","normalTextDecoration","serializeCloudinaryCharacters","QualifierModel","solid","isISolidStrokeModel","TextStyle","constructor","fontFamily","fontSize","_qualifierModel","lineSpacing","spacing","letterSpacing","fontAntialias","antiAlias","fontFamilyName","fontWeight","fontStyle","fontHinting","textDecoration","textAlignment","stroke","textStroke","strokeStyle","split","width","replace","color","length","toString","strokeStr","filter","a","join"],"mappings":"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","sourcesContent":["import { normal as normalFontWeight } from \"./fontWeight.js\";\r\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\r\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\r\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\r\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\r\nimport { solid } from \"./textStroke.js\";\r\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\r\n/**\r\n * @summary qualifier\r\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/image_transformations#adding_text_overlays|Adding text overlays to images}\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#adding_text_captions|Adding text overlays to videos}\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @see {@link Actions.Underlay| The underlay action}\r\n * @memberOf Qualifiers\r\n */\r\nclass TextStyle extends QualifierModel {\r\n    /**\r\n     * @param {string} fontFamily The font family\r\n     * @param {number | string} fontSize The font size\r\n     */\r\n    constructor(fontFamily, fontSize) {\r\n        super();\r\n        if (!fontFamily || !fontSize) {\r\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\r\n        }\r\n        this._qualifierModel.fontFamily = fontFamily;\r\n        this._qualifierModel.fontSize = fontSize;\r\n    }\r\n    /**\r\n     * @param {number} spacing The spacing between multiple lines in pixels.\r\n     */\r\n    lineSpacing(spacing) {\r\n        this._qualifierModel.lineSpacing = spacing;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param spacing The spacing between the letters, in pixels.\r\n     */\r\n    letterSpacing(spacing) {\r\n        this._qualifierModel.letterSpacing = spacing;\r\n        return this;\r\n    }\r\n    /**\r\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\r\n     * @param {FontAntialiasType|string} antiAlias\r\n     */\r\n    fontAntialias(antiAlias) {\r\n        this._qualifierModel.fontAntialias = antiAlias;\r\n        return this;\r\n    }\r\n    /**\r\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\r\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/image_transformations#using_custom_fonts_for_text_overlays|Using custom fonts for text overlays}.\r\n     * @param {string} fontFamilyName\r\n     */\r\n    fontFamily(fontFamilyName) {\r\n        this._qualifierModel.fontFamily = fontFamilyName;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {number} fontSize The font size\r\n     */\r\n    fontSize(fontSize) {\r\n        this._qualifierModel.fontSize = fontSize;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {FontWeightType|string} fontWeight The font weight\r\n     */\r\n    fontWeight(fontWeight) {\r\n        this._qualifierModel.fontWeight = fontWeight;\r\n        return this;\r\n    }\r\n    /**\r\n     *\r\n     * @param {string} fontStyle The font style.\r\n     */\r\n    fontStyle(fontStyle) {\r\n        this._qualifierModel.fontStyle = fontStyle;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\r\n     */\r\n    fontHinting(fontHinting) {\r\n        this._qualifierModel.fontHinting = fontHinting;\r\n        return this;\r\n    }\r\n    /**\r\n     *\r\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\r\n     */\r\n    textDecoration(textDecoration) {\r\n        this._qualifierModel.textDecoration = textDecoration;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {TextAlignmentType|string} textAlignment The text alignment\r\n     */\r\n    textAlignment(textAlignment) {\r\n        this._qualifierModel.textAlignment = textAlignment;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\r\n     */\r\n    stroke(textStroke) {\r\n        if (textStroke) {\r\n            const strokeStyle = textStroke.split('_');\r\n            this._qualifierModel.stroke = {\r\n                width: +(strokeStyle[1].replace('px', '')),\r\n                color: strokeStyle[strokeStyle.length - 1]\r\n            };\r\n        }\r\n        else {\r\n            this._qualifierModel.stroke = true;\r\n        }\r\n        return this;\r\n    }\r\n    toString() {\r\n        const { stroke } = this._qualifierModel;\r\n        let strokeStr = '';\r\n        if (stroke) {\r\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\r\n        }\r\n        return [\r\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\r\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\r\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\r\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\r\n            this._qualifierModel.textAlignment,\r\n            strokeStr,\r\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\r\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\r\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\r\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\r\n        ].filter((a) => a).join('_');\r\n    }\r\n}\r\nexport { TextStyle };\r\n"]},"metadata":{},"sourceType":"module"}