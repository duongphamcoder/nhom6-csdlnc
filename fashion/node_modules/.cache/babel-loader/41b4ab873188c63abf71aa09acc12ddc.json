{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { clip, clipEvenOdd } from \"../../qualifiers/flag.js\";\n/**\r\n * @description  Defines the clipping path to use when trimming pixels.\r\n * @extends SDK.Action\r\n * @memberOf Actions.PSDTools\r\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\r\n */\n\nclass ClipAction extends Action {\n  constructor() {\n    super();\n    this.isEvenOdd = false;\n  }\n  /**\r\n   * @description The name of the path to clip by\r\n   * @param {string} path\r\n   * @return {this}\r\n   */\n\n\n  byName(path) {\n    this.path = path;\n    return this;\n  }\n  /**\r\n   * @description The index of the path to clip by\r\n   * @param {number} path\r\n   * @return {this}\r\n   */\n\n\n  byIndex(path) {\n    this.path = path;\n    return this;\n  }\n  /**\r\n   * @description Trims pixels according to a clipping path included in the original image using an evenodd clipping rule.\r\n   * @return {this}\r\n   */\n\n\n  evenOdd() {\n    this.isEvenOdd = true;\n    return this;\n  }\n\n  prepareQualifiers() {\n    let qualifierValue;\n\n    if (typeof this.path === 'string') {\n      qualifierValue = new QualifierValue(['name', this.path]).setDelimiter(':');\n    } else {\n      qualifierValue = new QualifierValue(this.path);\n    } //handles flag\n\n\n    if (this.isEvenOdd) {\n      this.addFlag(clipEvenOdd());\n    } else {\n      this.addFlag(clip());\n    }\n\n    this.addQualifier(new Qualifier('pg', qualifierValue));\n    return this;\n  }\n\n}\n\nexport { ClipAction };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/actions/psdTools/ClipAction.js"],"names":["Action","Qualifier","QualifierValue","clip","clipEvenOdd","ClipAction","constructor","isEvenOdd","byName","path","byIndex","evenOdd","prepareQualifiers","qualifierValue","setDelimiter","addFlag","addQualifier"],"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,0BAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyBL,MAAzB,CAAgC;AAC5BM,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACD,IAAD,EAAO;AACV,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,OAAO,GAAG;AACN,SAAKJ,SAAL,GAAiB,IAAjB;AACA,WAAO,IAAP;AACH;;AACDK,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,cAAJ;;AACA,QAAI,OAAO,KAAKJ,IAAZ,KAAqB,QAAzB,EAAmC;AAC/BI,MAAAA,cAAc,GAAG,IAAIX,cAAJ,CAAmB,CAAC,MAAD,EAAS,KAAKO,IAAd,CAAnB,EAAwCK,YAAxC,CAAqD,GAArD,CAAjB;AACH,KAFD,MAGK;AACDD,MAAAA,cAAc,GAAG,IAAIX,cAAJ,CAAmB,KAAKO,IAAxB,CAAjB;AACH,KAPe,CAQhB;;;AACA,QAAI,KAAKF,SAAT,EAAoB;AAChB,WAAKQ,OAAL,CAAaX,WAAW,EAAxB;AACH,KAFD,MAGK;AACD,WAAKW,OAAL,CAAaZ,IAAI,EAAjB;AACH;;AACD,SAAKa,YAAL,CAAkB,IAAIf,SAAJ,CAAc,IAAd,EAAoBY,cAApB,CAAlB;AACA,WAAO,IAAP;AACH;;AAhD2B;;AAkDhC,SAASR,UAAT","sourcesContent":["import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { clip, clipEvenOdd } from \"../../qualifiers/flag.js\";\r\n/**\r\n * @description  Defines the clipping path to use when trimming pixels.\r\n * @extends SDK.Action\r\n * @memberOf Actions.PSDTools\r\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\r\n */\r\nclass ClipAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this.isEvenOdd = false;\r\n    }\r\n    /**\r\n     * @description The name of the path to clip by\r\n     * @param {string} path\r\n     * @return {this}\r\n     */\r\n    byName(path) {\r\n        this.path = path;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The index of the path to clip by\r\n     * @param {number} path\r\n     * @return {this}\r\n     */\r\n    byIndex(path) {\r\n        this.path = path;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Trims pixels according to a clipping path included in the original image using an evenodd clipping rule.\r\n     * @return {this}\r\n     */\r\n    evenOdd() {\r\n        this.isEvenOdd = true;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let qualifierValue;\r\n        if (typeof this.path === 'string') {\r\n            qualifierValue = new QualifierValue(['name', this.path]).setDelimiter(':');\r\n        }\r\n        else {\r\n            qualifierValue = new QualifierValue(this.path);\r\n        }\r\n        //handles flag\r\n        if (this.isEvenOdd) {\r\n            this.addFlag(clipEvenOdd());\r\n        }\r\n        else {\r\n            this.addFlag(clip());\r\n        }\r\n        this.addQualifier(new Qualifier('pg', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport { ClipAction };\r\n"]},"metadata":{},"sourceType":"module"}