{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\n/**\r\n * @summary SDK\r\n * @description - Defines how to transform an asset\r\n * @memberOf SDK\r\n */\n\nclass Transformation {\n  constructor() {\n    this.actions = [];\n  }\n  /**\r\n   * @param {SDK.Action | string} action\r\n   * @return {this}\r\n   */\n\n\n  addAction(action) {\n    let actionToAdd;\n\n    if (typeof action === 'string') {\n      if (action.indexOf('/') >= 0) {\n        throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n      } else {\n        actionToAdd = new RawAction(action);\n      }\n    } else {\n      actionToAdd = action;\n    }\n\n    this.actions.push(actionToAdd);\n    return this;\n  }\n  /**\r\n   * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\r\n   * @param {string | SDK.Transformation} tx\r\n   * @example\r\n   * import {Transformation} from \"@cloudinary/url-gen\";\r\n   *\r\n   * const transformation = new Transformation();\r\n   * transformation.addTransformation('w_100/w_200/w_300');\r\n   * @return {this}\r\n   */\n\n\n  addTransformation(tx) {\n    if (tx instanceof Transformation) {\n      // Concat the new actions into the existing actions\n      this.actions = this.actions.concat(tx.actions);\n    } else {\n      this.actions.push(new RawAction(tx));\n    }\n\n    return this;\n  }\n  /**\r\n   * @return {string}\r\n   */\n\n\n  toString() {\n    return this.actions.map(action => {\n      return action.toString();\n    }).filter(a => a).join('/');\n  }\n  /**\r\n   * @description Delivers an animated GIF.\r\n   * @param {AnimatedAction} animatedAction\r\n   * @return {this}\r\n   */\n\n\n  animated(animatedAction) {\n    return this.addAction(animatedAction);\n  }\n  /**\r\n   * @description Adds a border around the image.\r\n   * @param {Border} borderAction\r\n   * @return {this}\r\n   */\n\n\n  border(borderAction) {\n    return this.addAction(borderAction);\n  }\n  /**\r\n   * @description Adjusts the shape of the delivered image. </br>\r\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\r\n   * @param {IReshape} reshapeAction\r\n   * @return {this}\r\n   */\n\n\n  reshape(reshapeAction) {\n    return this.addAction(reshapeAction);\n  }\n  /**\r\n   * @description Resize the asset using provided resize action\r\n   * @param {ResizeSimpleAction} resizeAction\r\n   * @return {this}\r\n   */\n\n\n  resize(resizeAction) {\n    return this.addAction(resizeAction);\n  }\n  /**\r\n   * @param {DeliveryAction} quality\r\n   * @return {this}\r\n   */\n\n\n  quality(quality) {\n    return this.addAction(quality);\n  }\n  /**\r\n   * @description Rounds the specified corners of an image.\r\n   * @param roundCornersAction\r\n   * @return {this}\r\n   */\n\n\n  roundCorners(roundCornersAction) {\n    return this.addAction(roundCornersAction);\n  }\n  /**\r\n   * @description Adds an overlay over the base image.\r\n   * @param {LayerAction} overlayAction\r\n   * @return {this}\r\n   */\n\n\n  overlay(overlayAction) {\n    return this.addAction(overlayAction);\n  }\n  /**\r\n   * @description Adds an underlay under the base image.\r\n   * @param {LayerAction} underlayAction\r\n   * @return {this}\r\n   */\n\n\n  underlay(underlayAction) {\n    underlayAction.setLayerType('u');\n    return this.addAction(underlayAction);\n  }\n  /**\r\n   * @description Defines an new user variable.\r\n   * @param {VariableAction} variableAction\r\n   * @return {this}\r\n   */\n\n\n  addVariable(variableAction) {\n    return this.addAction(variableAction);\n  }\n  /**\r\n   * @description Specifies a condition to be met before applying a transformation.\r\n   * @param {ConditionalAction} conditionAction\r\n   * @return {this}\r\n   */\n\n\n  conditional(conditionAction) {\n    return this.addAction(conditionAction);\n  }\n  /**\r\n   * @description Applies a filter or an effect on an asset.\r\n   * @param {SimpleEffectAction} effectAction\r\n   * @return {this}\r\n   */\n\n\n  effect(effectAction) {\n    return this.addAction(effectAction);\n  }\n  /**\r\n   * @description Applies adjustment effect on an asset.\r\n   * @param action\r\n   * @return {this}\r\n   */\n\n\n  adjust(action) {\n    return this.addAction(action);\n  }\n  /**\r\n   * @description Rotates the asset by the given angle.\r\n   * @param {RotateAction} rotateAction\r\n   * @return {this}\r\n   */\n\n\n  rotate(rotateAction) {\n    return this.addAction(rotateAction);\n  }\n  /**\r\n   * @description Applies a pre-defined named transformation of the given name.\r\n   * @param {NamedTransformation} namedTransformation\r\n   * @return {this}\r\n   */\n\n\n  namedTransformation(namedTransformation) {\n    return this.addAction(namedTransformation);\n  }\n  /**\r\n   * @description Applies delivery action.\r\n   * @param deliveryAction\r\n   * @return {this}\r\n   */\n\n\n  delivery(deliveryAction) {\n    return this.addAction(deliveryAction);\n  }\n  /**\r\n   * @description Sets the color of the background.\r\n   * @param {Qualifiers.Color} color\r\n   * @return {this}\r\n   */\n\n\n  backgroundColor(color) {\n    return this.addAction(new BackgroundColor(prepareColor(color)));\n  }\n  /**\r\n   * @description Adds a layer in a Photoshop document.\r\n   * @param action\r\n   * @return {this}\r\n   */\n\n\n  psdTools(action) {\n    return this.addAction(action);\n  }\n  /**\r\n   * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\r\n   * @param action\r\n   * @return {this}\r\n   */\n\n\n  extract(action) {\n    return this.addAction(action);\n  }\n  /**\r\n   * @description Adds a flag as a separate action.\r\n   * @param {Qualifiers.Flag | string} flagQualifier\r\n   * @return {this}\r\n   */\n\n\n  addFlag(flagQualifier) {\n    const action = new Action();\n    let flagToAdd = flagQualifier;\n\n    if (typeof flagQualifier === 'string') {\n      flagToAdd = new FlagQualifier(flagQualifier);\n    }\n\n    action.addQualifier(flagToAdd);\n    return this.addAction(action);\n  }\n  /**\r\n   * @description Inject a custom function into the image transformation pipeline.\r\n   * @return {this}\r\n   */\n\n\n  customFunction(customFunction) {\n    return this.addAction(customFunction);\n  }\n  /**\r\n   * Transcodes the video (or audio) to another format.\r\n   * @param {Action} action\r\n   * @return {this}\r\n   */\n\n\n  transcode(action) {\n    return this.addAction(action);\n  }\n  /**\r\n   * Applies the specified video edit action.\r\n   *\r\n   * @param {videoEditType} action\r\n   * @return {this}\r\n   */\n\n\n  videoEdit(action) {\n    return this.addAction(action);\n  }\n\n  toJson() {\n    const actions = [];\n\n    for (const action of this.actions) {\n      const json = action.toJson();\n\n      if (isErrorObject(json)) {\n        // Fail early and return an IErrorObject\n        return json;\n      }\n\n      actions.push(json);\n    }\n\n    return {\n      actions\n    };\n  }\n\n}\n\nexport { Transformation };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/transformation/Transformation.js"],"names":["Action","BackgroundColor","prepareColor","FlagQualifier","RawAction","isErrorObject","Transformation","constructor","actions","addAction","action","actionToAdd","indexOf","push","addTransformation","tx","concat","toString","map","filter","a","join","animated","animatedAction","border","borderAction","reshape","reshapeAction","resize","resizeAction","quality","roundCorners","roundCornersAction","overlay","overlayAction","underlay","underlayAction","setLayerType","addVariable","variableAction","conditional","conditionAction","effect","effectAction","adjust","rotate","rotateAction","namedTransformation","delivery","deliveryAction","backgroundColor","color","psdTools","extract","addFlag","flagQualifier","flagToAdd","addQualifier","customFunction","transcode","videoEdit","toJson","json"],"mappings":"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","sourcesContent":["import { Action } from \"../internal/Action.js\";\r\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\r\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\r\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\r\nimport { RawAction } from \"../internal/RawAction.js\";\r\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\r\n/**\r\n * @summary SDK\r\n * @description - Defines how to transform an asset\r\n * @memberOf SDK\r\n */\r\nclass Transformation {\r\n    constructor() {\r\n        this.actions = [];\r\n    }\r\n    /**\r\n     * @param {SDK.Action | string} action\r\n     * @return {this}\r\n     */\r\n    addAction(action) {\r\n        let actionToAdd;\r\n        if (typeof action === 'string') {\r\n            if (action.indexOf('/') >= 0) {\r\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\r\n            }\r\n            else {\r\n                actionToAdd = new RawAction(action);\r\n            }\r\n        }\r\n        else {\r\n            actionToAdd = action;\r\n        }\r\n        this.actions.push(actionToAdd);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\r\n     * @param {string | SDK.Transformation} tx\r\n     * @example\r\n     * import {Transformation} from \"@cloudinary/url-gen\";\r\n     *\r\n     * const transformation = new Transformation();\r\n     * transformation.addTransformation('w_100/w_200/w_300');\r\n     * @return {this}\r\n     */\r\n    addTransformation(tx) {\r\n        if (tx instanceof Transformation) {\r\n            // Concat the new actions into the existing actions\r\n            this.actions = this.actions.concat(tx.actions);\r\n        }\r\n        else {\r\n            this.actions.push(new RawAction(tx));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return this.actions\r\n            .map((action) => {\r\n            return action.toString();\r\n        })\r\n            .filter((a) => a)\r\n            .join('/');\r\n    }\r\n    /**\r\n     * @description Delivers an animated GIF.\r\n     * @param {AnimatedAction} animatedAction\r\n     * @return {this}\r\n     */\r\n    animated(animatedAction) {\r\n        return this.addAction(animatedAction);\r\n    }\r\n    /**\r\n     * @description Adds a border around the image.\r\n     * @param {Border} borderAction\r\n     * @return {this}\r\n     */\r\n    border(borderAction) {\r\n        return this.addAction(borderAction);\r\n    }\r\n    /**\r\n     * @description Adjusts the shape of the delivered image. </br>\r\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\r\n     * @param {IReshape} reshapeAction\r\n     * @return {this}\r\n     */\r\n    reshape(reshapeAction) {\r\n        return this.addAction(reshapeAction);\r\n    }\r\n    /**\r\n     * @description Resize the asset using provided resize action\r\n     * @param {ResizeSimpleAction} resizeAction\r\n     * @return {this}\r\n     */\r\n    resize(resizeAction) {\r\n        return this.addAction(resizeAction);\r\n    }\r\n    /**\r\n     * @param {DeliveryAction} quality\r\n     * @return {this}\r\n     */\r\n    quality(quality) {\r\n        return this.addAction(quality);\r\n    }\r\n    /**\r\n     * @description Rounds the specified corners of an image.\r\n     * @param roundCornersAction\r\n     * @return {this}\r\n     */\r\n    roundCorners(roundCornersAction) {\r\n        return this.addAction(roundCornersAction);\r\n    }\r\n    /**\r\n     * @description Adds an overlay over the base image.\r\n     * @param {LayerAction} overlayAction\r\n     * @return {this}\r\n     */\r\n    overlay(overlayAction) {\r\n        return this.addAction(overlayAction);\r\n    }\r\n    /**\r\n     * @description Adds an underlay under the base image.\r\n     * @param {LayerAction} underlayAction\r\n     * @return {this}\r\n     */\r\n    underlay(underlayAction) {\r\n        underlayAction.setLayerType('u');\r\n        return this.addAction(underlayAction);\r\n    }\r\n    /**\r\n     * @description Defines an new user variable.\r\n     * @param {VariableAction} variableAction\r\n     * @return {this}\r\n     */\r\n    addVariable(variableAction) {\r\n        return this.addAction(variableAction);\r\n    }\r\n    /**\r\n     * @description Specifies a condition to be met before applying a transformation.\r\n     * @param {ConditionalAction} conditionAction\r\n     * @return {this}\r\n     */\r\n    conditional(conditionAction) {\r\n        return this.addAction(conditionAction);\r\n    }\r\n    /**\r\n     * @description Applies a filter or an effect on an asset.\r\n     * @param {SimpleEffectAction} effectAction\r\n     * @return {this}\r\n     */\r\n    effect(effectAction) {\r\n        return this.addAction(effectAction);\r\n    }\r\n    /**\r\n     * @description Applies adjustment effect on an asset.\r\n     * @param action\r\n     * @return {this}\r\n     */\r\n    adjust(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Rotates the asset by the given angle.\r\n     * @param {RotateAction} rotateAction\r\n     * @return {this}\r\n     */\r\n    rotate(rotateAction) {\r\n        return this.addAction(rotateAction);\r\n    }\r\n    /**\r\n     * @description Applies a pre-defined named transformation of the given name.\r\n     * @param {NamedTransformation} namedTransformation\r\n     * @return {this}\r\n     */\r\n    namedTransformation(namedTransformation) {\r\n        return this.addAction(namedTransformation);\r\n    }\r\n    /**\r\n     * @description Applies delivery action.\r\n     * @param deliveryAction\r\n     * @return {this}\r\n     */\r\n    delivery(deliveryAction) {\r\n        return this.addAction(deliveryAction);\r\n    }\r\n    /**\r\n     * @description Sets the color of the background.\r\n     * @param {Qualifiers.Color} color\r\n     * @return {this}\r\n     */\r\n    backgroundColor(color) {\r\n        return this.addAction(new BackgroundColor(prepareColor(color)));\r\n    }\r\n    /**\r\n     * @description Adds a layer in a Photoshop document.\r\n     * @param action\r\n     * @return {this}\r\n     */\r\n    psdTools(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\r\n     * @param action\r\n     * @return {this}\r\n     */\r\n    extract(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Adds a flag as a separate action.\r\n     * @param {Qualifiers.Flag | string} flagQualifier\r\n     * @return {this}\r\n     */\r\n    addFlag(flagQualifier) {\r\n        const action = new Action();\r\n        let flagToAdd = flagQualifier;\r\n        if (typeof flagQualifier === 'string') {\r\n            flagToAdd = new FlagQualifier(flagQualifier);\r\n        }\r\n        action.addQualifier(flagToAdd);\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Inject a custom function into the image transformation pipeline.\r\n     * @return {this}\r\n     */\r\n    customFunction(customFunction) {\r\n        return this.addAction(customFunction);\r\n    }\r\n    /**\r\n     * Transcodes the video (or audio) to another format.\r\n     * @param {Action} action\r\n     * @return {this}\r\n     */\r\n    transcode(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * Applies the specified video edit action.\r\n     *\r\n     * @param {videoEditType} action\r\n     * @return {this}\r\n     */\r\n    videoEdit(action) {\r\n        return this.addAction(action);\r\n    }\r\n    toJson() {\r\n        const actions = [];\r\n        for (const action of this.actions) {\r\n            const json = action.toJson();\r\n            if (isErrorObject(json)) {\r\n                // Fail early and return an IErrorObject\r\n                return json;\r\n            }\r\n            actions.push(json);\r\n        }\r\n        return { actions };\r\n    }\r\n}\r\nexport { Transformation };\r\n"]},"metadata":{},"sourceType":"module"}