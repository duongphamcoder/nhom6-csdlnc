{"ast":null,"code":"import { CompassGravity } from \"./gravity/compassGravity/CompassGravity.js\";\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity.js\";\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity.js\";\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity.js\";\n/**\r\n * @description Defines the gravity based on directional values from a compass.\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity|Control gravity for images}\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity|Control gravity for videos}\r\n * @param {Qualifiers.Compass | string} direction A compass Values\r\n * @memberOf Qualifiers.Gravity\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(compass(north())))\r\n * @return {CompassGravity}\r\n */\n\nfunction compass(direction) {\n  return new CompassGravity(direction);\n}\n/**\r\n * @summary qualifier\r\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\r\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\r\n * @memberOf Qualifiers.Gravity\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {focusOn} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(focusOn(cat())))\r\n * @return {FocusOnGravity}\r\n */\n\n\nfunction focusOn() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const res = [...args];\n  return new FocusOnGravity(res);\n}\n/**\r\n * @summary qualifier\r\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\r\n * @memberOf Qualifiers.Gravity\r\n * @return {Qualifiers.Gravity.AutoGravity}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(autoGravity()))\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\r\n * import {AutoFocus} from \"@cloudinary/url-gen/qualifiers/autoFocus\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\r\n */\n\n\nfunction autoGravity() {\n  return new AutoGravity();\n}\n/**\r\n * @summary qualifier\r\n * @description Set the center of gravity to the given x & y coordinates.\r\n * @memberOf Qualifiers.Gravity\r\n * @return {XYCenterGravity}\r\n */\n\n\nfunction xyCenter() {\n  return new XYCenterGravity();\n}\n/**\r\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\r\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\r\n * @namespace Gravity\r\n * @memberOf Qualifiers\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(compass(north())))\r\n *\r\n * // Expand every function separately to see its own example\r\n */\n\n\nconst Gravity = {\n  compass: compass,\n  autoGravity: autoGravity,\n  focusOn: focusOn,\n  xyCenter\n};\nexport { Gravity, compass, autoGravity, focusOn, xyCenter };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/qualifiers/gravity.js"],"names":["CompassGravity","FocusOnGravity","AutoGravity","XYCenterGravity","compass","direction","focusOn","args","res","autoGravity","xyCenter","Gravity"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,eAAT,QAAgC,8CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACxB,SAAO,IAAIL,cAAJ,CAAmBK,SAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,GAA0B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACtB,QAAMC,GAAG,GAAG,CAAC,GAAGD,IAAJ,CAAZ;AACA,SAAO,IAAIN,cAAJ,CAAmBO,GAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,GAAuB;AACnB,SAAO,IAAIP,WAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,QAAT,GAAoB;AAChB,SAAO,IAAIP,eAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,OAAO,GAAG;AACZP,EAAAA,OAAO,EAAEA,OADG;AAEZK,EAAAA,WAAW,EAAEA,WAFD;AAGZH,EAAAA,OAAO,EAAEA,OAHG;AAIZI,EAAAA;AAJY,CAAhB;AAMA,SAASC,OAAT,EAAkBP,OAAlB,EAA2BK,WAA3B,EAAwCH,OAAxC,EAAiDI,QAAjD","sourcesContent":["import { CompassGravity } from \"./gravity/compassGravity/CompassGravity.js\";\r\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity.js\";\r\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity.js\";\r\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity.js\";\r\n/**\r\n * @description Defines the gravity based on directional values from a compass.\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity|Control gravity for images}\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity|Control gravity for videos}\r\n * @param {Qualifiers.Compass | string} direction A compass Values\r\n * @memberOf Qualifiers.Gravity\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(compass(north())))\r\n * @return {CompassGravity}\r\n */\r\nfunction compass(direction) {\r\n    return new CompassGravity(direction);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\r\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\r\n * @memberOf Qualifiers.Gravity\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {focusOn} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(focusOn(cat())))\r\n * @return {FocusOnGravity}\r\n */\r\nfunction focusOn(...args) {\r\n    const res = [...args];\r\n    return new FocusOnGravity(res);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\r\n * @memberOf Qualifiers.Gravity\r\n * @return {Qualifiers.Gravity.AutoGravity}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(autoGravity()))\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\r\n * import {AutoFocus} from \"@cloudinary/url-gen/qualifiers/autoFocus\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\r\n */\r\nfunction autoGravity() {\r\n    return new AutoGravity();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Set the center of gravity to the given x & y coordinates.\r\n * @memberOf Qualifiers.Gravity\r\n * @return {XYCenterGravity}\r\n */\r\nfunction xyCenter() {\r\n    return new XYCenterGravity();\r\n}\r\n/**\r\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\r\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\r\n * @namespace Gravity\r\n * @memberOf Qualifiers\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(compass(north())))\r\n *\r\n * // Expand every function separately to see its own example\r\n */\r\nconst Gravity = {\r\n    compass: compass,\r\n    autoGravity: autoGravity,\r\n    focusOn: focusOn,\r\n    xyCenter\r\n};\r\nexport { Gravity, compass, autoGravity, focusOn, xyCenter };\r\n"]},"metadata":{},"sourceType":"module"}