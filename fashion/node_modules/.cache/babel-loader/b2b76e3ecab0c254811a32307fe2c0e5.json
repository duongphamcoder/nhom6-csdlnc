{"ast":null,"code":"/**\r\n * Sort a map by key\r\n * @private\r\n * @param map <string, any>\r\n * @Return array of map's values sorted by key\r\n */\nfunction mapToSortedArray(map, flags) {\n  const array = Array.from(map.entries()); // objects from the Array.from() method above are stored in array of arrays:\n  // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\n  // Flags is an array of FlagQualifierObj\n  // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\n\n  flags.forEach(flag => {\n    array.push(['fl', flag]); // push ['fl', flagQualifier]\n  });\n  return array.sort().map(v => v[1]);\n}\n/**\r\n * Checks if `value` is a string.\r\n * @private\r\n * @param {*} value The value to check.\r\n * @return {boolean} `true` if `value` is a string, else `false`.\r\n */\n\n\nfunction isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport { isString, mapToSortedArray };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/internal/utils/dataStructureUtils.js"],"names":["mapToSortedArray","map","flags","array","Array","from","entries","forEach","flag","push","sort","v","isString","value","String"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AAClC,QAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWJ,GAAG,CAACK,OAAJ,EAAX,CAAd,CADkC,CAElC;AACA;AACA;AACA;;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAeC,IAAD,IAAU;AACpBL,IAAAA,KAAK,CAACM,IAAN,CAAW,CAAC,IAAD,EAAOD,IAAP,CAAX,EADoB,CACM;AAC7B,GAFD;AAGA,SAAOL,KAAK,CAACO,IAAN,GAAaT,GAAb,CAAkBU,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAzB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,SAAQ,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYC,MAAtD;AACH;;AACD,SAASF,QAAT,EAAmBZ,gBAAnB","sourcesContent":["/**\r\n * Sort a map by key\r\n * @private\r\n * @param map <string, any>\r\n * @Return array of map's values sorted by key\r\n */\r\nfunction mapToSortedArray(map, flags) {\r\n    const array = Array.from(map.entries());\r\n    // objects from the Array.from() method above are stored in array of arrays:\r\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\r\n    // Flags is an array of FlagQualifierObj\r\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\r\n    flags.forEach((flag) => {\r\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\r\n    });\r\n    return array.sort().map((v) => v[1]);\r\n}\r\n/**\r\n * Checks if `value` is a string.\r\n * @private\r\n * @param {*} value The value to check.\r\n * @return {boolean} `true` if `value` is a string, else `false`.\r\n */\r\nfunction isString(value) {\r\n    return (typeof value === 'string' || value instanceof String);\r\n}\r\nexport { isString, mapToSortedArray };\r\n"]},"metadata":{},"sourceType":"module"}