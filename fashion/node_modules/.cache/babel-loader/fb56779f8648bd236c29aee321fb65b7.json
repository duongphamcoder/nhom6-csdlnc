{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\r\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\r\n * @extends EffectActionWithLevel\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\n\nclass ColorizeEffectAction extends EffectActionWithLevel {\n  /**\r\n   * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\r\n   * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\r\n   * @return {this}\r\n   */\n  color(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      level,\n      color\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(actionType, level);\n    color && result.color(color);\n    return result;\n  }\n\n}\n\nexport { ColorizeEffectAction };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/actions/effect/Colorize.js"],"names":["QualifierValue","Qualifier","prepareColor","EffectActionWithLevel","ColorizeEffectAction","color","_actionModel","addQualifier","fromJson","actionModel","actionType","level","result"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA,SAASC,qBAAT,QAAsC,0CAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAN,SAAmCD,qBAAnC,CAAyD;AACrD;AACJ;AACA;AACA;AACA;AACIE,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACT,SAAKC,YAAL,CAAkBD,KAAlB,GAA0BA,KAA1B;AACA,WAAO,KAAKE,YAAL,CAAkB,IAAIN,SAAJ,CAAc,IAAd,EAAoB,IAAID,cAAJ,CAAmBE,YAAY,CAACG,KAAD,CAA/B,CAApB,CAAlB,CAAP;AACH;;AACc,SAARG,QAAQ,CAACC,WAAD,EAAc;AACzB,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,KAAd;AAAqBN,MAAAA;AAArB,QAA+BI,WAArC,CADyB,CAEzB;AACA;;AACA,UAAMG,MAAM,GAAG,IAAI,IAAJ,CAASF,UAAT,EAAqBC,KAArB,CAAf;AACAN,IAAAA,KAAK,IAAIO,MAAM,CAACP,KAAP,CAAaA,KAAb,CAAT;AACA,WAAOO,MAAP;AACH;;AAjBoD;;AAmBzD,SAASR,oBAAT","sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\r\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\r\n/**\r\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\r\n * @extends EffectActionWithLevel\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass ColorizeEffectAction extends EffectActionWithLevel {\r\n    /**\r\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\r\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\r\n     * @return {this}\r\n     */\r\n    color(color) {\r\n        this._actionModel.color = color;\r\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, level, color } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType, level);\r\n        color && result.color(color);\r\n        return result;\r\n    }\r\n}\r\nexport { ColorizeEffectAction };\r\n"]},"metadata":{},"sourceType":"module"}