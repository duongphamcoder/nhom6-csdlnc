{"ast":null,"code":"import { BaseTextSource } from \"./BaseTextSource.js\";\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.SubtitlesSource}\r\n * @description Defines how to manipulate a Subtitles layer\r\n */\n\nclass SubtitlesSource extends BaseTextSource {\n  constructor(fileName) {\n    super(fileName);\n    this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n\n    this._qualifierModel = {\n      sourceType: 'subtitles',\n      publicId: fileName\n    };\n  }\n  /**\r\n   * @description Set the textStyle for the subtitles layer\r\n   * @param {TextStyle} textStyle\r\n   */\n\n\n  textStyle(textStyle) {\n    this._textStyle = textStyle;\n    this._qualifierModel.textStyle = textStyle.toJson();\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\r\n   * Subtitle file names require a different encoding than texts\r\n   * @param text\r\n   * @example\r\n   * encodeText('foo/bar'); // -> foo:bar\r\n   */\n\n\n  encodeText(text) {\n    return text.replace(/\\//g, ':');\n  }\n\n}\n\nexport { SubtitlesSource };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/qualifiers/source/sourceTypes/SubtitlesSource.js"],"names":["BaseTextSource","SubtitlesSource","constructor","fileName","type","_qualifierModel","sourceType","publicId","textStyle","_textStyle","toJson","encodeText","text","replace"],"mappings":"AAAA,SAASA,cAAT,QAA+B,qBAA/B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,SAA8BD,cAA9B,CAA6C;AACzCE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,UAAMA,QAAN;AACA,SAAKC,IAAL,GAAY,WAAZ,CAFkB,CAEO;;AACzB,SAAKC,eAAL,GAAuB;AACnBC,MAAAA,UAAU,EAAE,WADO;AAEnBC,MAAAA,QAAQ,EAAEJ;AAFS,KAAvB;AAIH;AACD;AACJ;AACA;AACA;;;AACIK,EAAAA,SAAS,CAACA,SAAD,EAAY;AACjB,SAAKC,UAAL,GAAkBD,SAAlB;AACA,SAAKH,eAAL,CAAqBG,SAArB,GAAiCA,SAAS,CAACE,MAAV,EAAjC;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAOA,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACH;;AA5BwC;;AA8B7C,SAASZ,eAAT","sourcesContent":["import { BaseTextSource } from \"./BaseTextSource.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.SubtitlesSource}\r\n * @description Defines how to manipulate a Subtitles layer\r\n */\r\nclass SubtitlesSource extends BaseTextSource {\r\n    constructor(fileName) {\r\n        super(fileName);\r\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\r\n        this._qualifierModel = {\r\n            sourceType: 'subtitles',\r\n            publicId: fileName\r\n        };\r\n    }\r\n    /**\r\n     * @description Set the textStyle for the subtitles layer\r\n     * @param {TextStyle} textStyle\r\n     */\r\n    textStyle(textStyle) {\r\n        this._textStyle = textStyle;\r\n        this._qualifierModel.textStyle = textStyle.toJson();\r\n        return this;\r\n    }\r\n    /**\r\n     *\r\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\r\n     * Subtitle file names require a different encoding than texts\r\n     * @param text\r\n     * @example\r\n     * encodeText('foo/bar'); // -> foo:bar\r\n     */\r\n    encodeText(text) {\r\n        return text.replace(/\\//g, ':');\r\n    }\r\n}\r\nexport { SubtitlesSource };\r\n"]},"metadata":{},"sourceType":"module"}