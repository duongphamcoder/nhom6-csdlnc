{"ast":null,"code":"/**\r\n * Rotates or flips an image or video by the specified number of degrees, or automatically (images only) according to its orientation or available metadata.\r\n * @memberOf Actions\r\n * @namespace Rotate\r\n *\r\n * @example\r\n * <caption>Rotate by mode</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {mode, byAngle} from \"@cloudinary/url-gen/actions/rotate\";\r\n * import {autoLeft} from \"@cloudinary/url-gen/qualifiers/rotationMode\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * // Rotate by mode\r\n * image.rotate(mode(autoLeft());\r\n *\r\n * // Rotate by angle\r\n * image.rotate(byAngle(90));\r\n *\r\n * image.toURL();\r\n */\nimport RotateAction from \"./rotate/RotateAction.js\";\n/**\r\n * @summary action\r\n * @description Rotate an image by using a rotationMode\r\n * @param {RotationModeType|string} rotationMode\r\n * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\r\n * possible values\r\n * @memberOf Actions.Rotate\r\n * @return {Actions.Rotate.RotateAction}\r\n */\n\nfunction mode(rotationMode) {\n  return new RotateAction().mode(rotationMode);\n}\n/**\r\n * @summary action\r\n * @description Rotate an image by the given degrees.\r\n * @param {number} angle Given degrees. (Range: 0 to 360, Default: 0).\r\n * @return {Actions.Rotate.RotateAction}\r\n * @memberOf Actions.Rotate\r\n */\n\n\nfunction byAngle(angle) {\n  return new RotateAction(angle);\n}\n\nconst Rotate = {\n  byAngle,\n  mode\n};\nexport { Rotate, byAngle, mode };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/actions/rotate.js"],"names":["RotateAction","mode","rotationMode","byAngle","angle","Rotate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,YAAP,MAAyB,0BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,YAAd,EAA4B;AACxB,SAAO,IAAIF,YAAJ,GAAmBC,IAAnB,CAAwBC,YAAxB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,SAAO,IAAIJ,YAAJ,CAAiBI,KAAjB,CAAP;AACH;;AACD,MAAMC,MAAM,GAAG;AAAEF,EAAAA,OAAF;AAAWF,EAAAA;AAAX,CAAf;AACA,SAASI,MAAT,EAAiBF,OAAjB,EAA0BF,IAA1B","sourcesContent":["/**\r\n * Rotates or flips an image or video by the specified number of degrees, or automatically (images only) according to its orientation or available metadata.\r\n * @memberOf Actions\r\n * @namespace Rotate\r\n *\r\n * @example\r\n * <caption>Rotate by mode</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {mode, byAngle} from \"@cloudinary/url-gen/actions/rotate\";\r\n * import {autoLeft} from \"@cloudinary/url-gen/qualifiers/rotationMode\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * // Rotate by mode\r\n * image.rotate(mode(autoLeft());\r\n *\r\n * // Rotate by angle\r\n * image.rotate(byAngle(90));\r\n *\r\n * image.toURL();\r\n */\r\nimport RotateAction from \"./rotate/RotateAction.js\";\r\n/**\r\n * @summary action\r\n * @description Rotate an image by using a rotationMode\r\n * @param {RotationModeType|string} rotationMode\r\n * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\r\n * possible values\r\n * @memberOf Actions.Rotate\r\n * @return {Actions.Rotate.RotateAction}\r\n */\r\nfunction mode(rotationMode) {\r\n    return new RotateAction().mode(rotationMode);\r\n}\r\n/**\r\n * @summary action\r\n * @description Rotate an image by the given degrees.\r\n * @param {number} angle Given degrees. (Range: 0 to 360, Default: 0).\r\n * @return {Actions.Rotate.RotateAction}\r\n * @memberOf Actions.Rotate\r\n */\r\nfunction byAngle(angle) {\r\n    return new RotateAction(angle);\r\n}\r\nconst Rotate = { byAngle, mode };\r\nexport { Rotate, byAngle, mode };\r\n"]},"metadata":{},"sourceType":"module"}