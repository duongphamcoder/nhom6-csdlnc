{"ast":null,"code":"import { isUrl } from \"./urlUtils/isUrl.js\";\nimport { isFileName } from \"./urlUtils/isFileName.js\";\nimport { publicIDContainsVersion } from \"./urlUtils/publicIDContainsVersion.js\";\n/**\r\n * Create the URL prefix for Cloudinary resources.\r\n * Available use cases\r\n * http://res.cloudinary.com/{cloudName}\r\n * https://res.cloudinary.com/{cloudName}\r\n * https://{cloudName}-res.cloudinary.com/\r\n * http://{domain}/${cloudName}\r\n * https://{domain}/${cloudName}\r\n * https://{domain}\r\n * @private\r\n *\r\n * @param {string} cloudName\r\n * @param {IURLConfig} urlConfig\r\n */\n\nfunction getUrlPrefix(cloudName, urlConfig) {\n  const secure = urlConfig.secure;\n  const privateCDN = urlConfig.privateCdn;\n  const cname = urlConfig.cname;\n  const secureDistribution = urlConfig.secureDistribution;\n\n  if (!secure && !cname) {\n    return `http://res.cloudinary.com/${cloudName}`;\n  }\n\n  if (secure && !secureDistribution && privateCDN) {\n    return `https://${cloudName}-res.cloudinary.com`;\n  }\n\n  if (secure && !secureDistribution) {\n    return `https://res.cloudinary.com/${cloudName}`;\n  }\n\n  if (secure && secureDistribution && privateCDN) {\n    return `https://${secureDistribution}`;\n  }\n\n  if (secure && secureDistribution) {\n    return `https://${secureDistribution}/${cloudName}`;\n  }\n\n  if (!secure && cname) {\n    return `http://${cname}/${cloudName}`;\n  } else {\n    return 'ERROR';\n  }\n}\n/**\r\n * @private\r\n * @param assetType\r\n */\n\n\nfunction handleAssetType(assetType) {\n  //default to image\n  if (!assetType) {\n    return 'image';\n  }\n\n  return assetType;\n}\n/**\r\n * @private\r\n * @param deliveryType\r\n */\n\n\nfunction handleDeliveryType(deliveryType) {\n  //default to upload\n  if (!deliveryType) {\n    return 'upload';\n  }\n\n  return deliveryType;\n}\n/**\r\n *\r\n * @param {string} publicID\r\n * @param {number} version\r\n * @param {boolean} forceVersion\r\n */\n\n\nfunction getUrlVersion(publicID, version, forceVersion) {\n  const shouldForceVersion = forceVersion !== false;\n\n  if (version) {\n    return `v${version}`;\n  } // In all these conditions we never force a version\n\n\n  if (publicIDContainsVersion(publicID) || isUrl(publicID) || isFileName(publicID)) {\n    return '';\n  }\n\n  return shouldForceVersion ? 'v1' : '';\n}\n\nexport { handleAssetType, getUrlVersion, handleDeliveryType, getUrlPrefix };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/internal/url/cloudinaryURL.js"],"names":["isUrl","isFileName","publicIDContainsVersion","getUrlPrefix","cloudName","urlConfig","secure","privateCDN","privateCdn","cname","secureDistribution","handleAssetType","assetType","handleDeliveryType","deliveryType","getUrlVersion","publicID","version","forceVersion","shouldForceVersion"],"mappings":"AAAA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,uBAAT,QAAwC,uCAAxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,SAAjC,EAA4C;AACxC,QAAMC,MAAM,GAAGD,SAAS,CAACC,MAAzB;AACA,QAAMC,UAAU,GAAGF,SAAS,CAACG,UAA7B;AACA,QAAMC,KAAK,GAAGJ,SAAS,CAACI,KAAxB;AACA,QAAMC,kBAAkB,GAAGL,SAAS,CAACK,kBAArC;;AACA,MAAI,CAACJ,MAAD,IAAW,CAACG,KAAhB,EAAuB;AACnB,WAAQ,6BAA4BL,SAAU,EAA9C;AACH;;AACD,MAAIE,MAAM,IAAI,CAACI,kBAAX,IAAiCH,UAArC,EAAiD;AAC7C,WAAQ,WAAUH,SAAU,qBAA5B;AACH;;AACD,MAAIE,MAAM,IAAI,CAACI,kBAAf,EAAmC;AAC/B,WAAQ,8BAA6BN,SAAU,EAA/C;AACH;;AACD,MAAIE,MAAM,IAAII,kBAAV,IAAgCH,UAApC,EAAgD;AAC5C,WAAQ,WAAUG,kBAAmB,EAArC;AACH;;AACD,MAAIJ,MAAM,IAAII,kBAAd,EAAkC;AAC9B,WAAQ,WAAUA,kBAAmB,IAAGN,SAAU,EAAlD;AACH;;AACD,MAAI,CAACE,MAAD,IAAWG,KAAf,EAAsB;AAClB,WAAQ,UAASA,KAAM,IAAGL,SAAU,EAApC;AACH,GAFD,MAGK;AACD,WAAO,OAAP;AACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASO,eAAT,CAAyBC,SAAzB,EAAoC;AAChC;AACA,MAAI,CAACA,SAAL,EAAgB;AACZ,WAAO,OAAP;AACH;;AACD,SAAOA,SAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AACtC;AACA,MAAI,CAACA,YAAL,EAAmB;AACf,WAAO,QAAP;AACH;;AACD,SAAOA,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0CC,YAA1C,EAAwD;AACpD,QAAMC,kBAAkB,GAAGD,YAAY,KAAK,KAA5C;;AACA,MAAID,OAAJ,EAAa;AACT,WAAQ,IAAGA,OAAQ,EAAnB;AACH,GAJmD,CAKpD;;;AACA,MAAIf,uBAAuB,CAACc,QAAD,CAAvB,IAAqChB,KAAK,CAACgB,QAAD,CAA1C,IAAwDf,UAAU,CAACe,QAAD,CAAtE,EAAkF;AAC9E,WAAO,EAAP;AACH;;AACD,SAAOG,kBAAkB,GAAG,IAAH,GAAU,EAAnC;AACH;;AACD,SAASR,eAAT,EAA0BI,aAA1B,EAAyCF,kBAAzC,EAA6DV,YAA7D","sourcesContent":["import { isUrl } from \"./urlUtils/isUrl.js\";\r\nimport { isFileName } from \"./urlUtils/isFileName.js\";\r\nimport { publicIDContainsVersion } from \"./urlUtils/publicIDContainsVersion.js\";\r\n/**\r\n * Create the URL prefix for Cloudinary resources.\r\n * Available use cases\r\n * http://res.cloudinary.com/{cloudName}\r\n * https://res.cloudinary.com/{cloudName}\r\n * https://{cloudName}-res.cloudinary.com/\r\n * http://{domain}/${cloudName}\r\n * https://{domain}/${cloudName}\r\n * https://{domain}\r\n * @private\r\n *\r\n * @param {string} cloudName\r\n * @param {IURLConfig} urlConfig\r\n */\r\nfunction getUrlPrefix(cloudName, urlConfig) {\r\n    const secure = urlConfig.secure;\r\n    const privateCDN = urlConfig.privateCdn;\r\n    const cname = urlConfig.cname;\r\n    const secureDistribution = urlConfig.secureDistribution;\r\n    if (!secure && !cname) {\r\n        return `http://res.cloudinary.com/${cloudName}`;\r\n    }\r\n    if (secure && !secureDistribution && privateCDN) {\r\n        return `https://${cloudName}-res.cloudinary.com`;\r\n    }\r\n    if (secure && !secureDistribution) {\r\n        return `https://res.cloudinary.com/${cloudName}`;\r\n    }\r\n    if (secure && secureDistribution && privateCDN) {\r\n        return `https://${secureDistribution}`;\r\n    }\r\n    if (secure && secureDistribution) {\r\n        return `https://${secureDistribution}/${cloudName}`;\r\n    }\r\n    if (!secure && cname) {\r\n        return `http://${cname}/${cloudName}`;\r\n    }\r\n    else {\r\n        return 'ERROR';\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @param assetType\r\n */\r\nfunction handleAssetType(assetType) {\r\n    //default to image\r\n    if (!assetType) {\r\n        return 'image';\r\n    }\r\n    return assetType;\r\n}\r\n/**\r\n * @private\r\n * @param deliveryType\r\n */\r\nfunction handleDeliveryType(deliveryType) {\r\n    //default to upload\r\n    if (!deliveryType) {\r\n        return 'upload';\r\n    }\r\n    return deliveryType;\r\n}\r\n/**\r\n *\r\n * @param {string} publicID\r\n * @param {number} version\r\n * @param {boolean} forceVersion\r\n */\r\nfunction getUrlVersion(publicID, version, forceVersion) {\r\n    const shouldForceVersion = forceVersion !== false;\r\n    if (version) {\r\n        return `v${version}`;\r\n    }\r\n    // In all these conditions we never force a version\r\n    if (publicIDContainsVersion(publicID) || isUrl(publicID) || isFileName(publicID)) {\r\n        return '';\r\n    }\r\n    return shouldForceVersion ? 'v1' : '';\r\n}\r\nexport { handleAssetType, getUrlVersion, handleDeliveryType, getUrlPrefix };\r\n"]},"metadata":{},"sourceType":"module"}