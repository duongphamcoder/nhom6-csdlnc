{"ast":null,"code":"import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\n/**\r\n * @description This namespace contains different sources that can be used in overlays and underlays\r\n * @memberOf Qualifiers\r\n * @namespace Source\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @see {@link Actions.Underlay| The underlay action}\r\n */\n\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of an ImageSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the image to be used as a layer\r\n * @return {Qualifiers.Source.ImageSource}\r\n */\n\nfunction image(publicID) {\n  return new ImageSource(publicID);\n}\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a TextSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} text The text to display.\r\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\r\n * @return {Qualifiers.Source.TextSource}\r\n */\n\n\nfunction text(text, textStyle) {\n  return new TextSource(text, textStyle);\n}\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a VideoSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the video to be used as a layer\r\n * @return {Qualifiers.Source.VideoSource}\r\n */\n\n\nfunction video(publicID) {\n  return new VideoSource(publicID);\n}\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of an VideoSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} fileName The publicID of the video to be used as a layer\r\n * @return {Qualifiers.Source.VideoSource}\r\n */\n\n\nfunction subtitles(fileName) {\n  return new SubtitlesSource(fileName);\n}\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a FetchSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\r\n * @return {Qualifiers.Source.FetchSource}\r\n */\n\n\nfunction fetch(remoteURL) {\n  return new FetchSource(remoteURL);\n}\n\nconst Source = {\n  image,\n  text,\n  video,\n  subtitles,\n  fetch\n};\nexport { Source, image, text, video, subtitles, fetch };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/qualifiers/source.js"],"names":["VideoSource","ImageSource","SubtitlesSource","FetchSource","TextSource","image","publicID","text","textStyle","video","subtitles","fileName","fetch","remoteURL","Source"],"mappings":"AAAA,SAASA,WAAT,QAA4B,qCAA5B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,eAAT,QAAgC,yCAAhC;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,QAAf,EAAyB;AACrB,SAAO,IAAIL,WAAJ,CAAgBK,QAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,CAAcA,IAAd,EAAoBC,SAApB,EAA+B;AAC3B,SAAO,IAAIJ,UAAJ,CAAeG,IAAf,EAAqBC,SAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeH,QAAf,EAAyB;AACrB,SAAO,IAAIN,WAAJ,CAAgBM,QAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,SAAO,IAAIT,eAAJ,CAAoBS,QAApB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeC,SAAf,EAA0B;AACtB,SAAO,IAAIV,WAAJ,CAAgBU,SAAhB,CAAP;AACH;;AACD,MAAMC,MAAM,GAAG;AAAET,EAAAA,KAAF;AAASE,EAAAA,IAAT;AAAeE,EAAAA,KAAf;AAAsBC,EAAAA,SAAtB;AAAiCE,EAAAA;AAAjC,CAAf;AACA,SAASE,MAAT,EAAiBT,KAAjB,EAAwBE,IAAxB,EAA8BE,KAA9B,EAAqCC,SAArC,EAAgDE,KAAhD","sourcesContent":["import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\r\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\r\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\r\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\r\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\r\n/**\r\n * @description This namespace contains different sources that can be used in overlays and underlays\r\n * @memberOf Qualifiers\r\n * @namespace Source\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @see {@link Actions.Underlay| The underlay action}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of an ImageSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the image to be used as a layer\r\n * @return {Qualifiers.Source.ImageSource}\r\n */\r\nfunction image(publicID) {\r\n    return new ImageSource(publicID);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a TextSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} text The text to display.\r\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\r\n * @return {Qualifiers.Source.TextSource}\r\n */\r\nfunction text(text, textStyle) {\r\n    return new TextSource(text, textStyle);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a VideoSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the video to be used as a layer\r\n * @return {Qualifiers.Source.VideoSource}\r\n */\r\nfunction video(publicID) {\r\n    return new VideoSource(publicID);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of an VideoSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} fileName The publicID of the video to be used as a layer\r\n * @return {Qualifiers.Source.VideoSource}\r\n */\r\nfunction subtitles(fileName) {\r\n    return new SubtitlesSource(fileName);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a FetchSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\r\n * @return {Qualifiers.Source.FetchSource}\r\n */\r\nfunction fetch(remoteURL) {\r\n    return new FetchSource(remoteURL);\r\n}\r\nconst Source = { image, text, video, subtitles, fetch };\r\nexport { Source, image, text, video, subtitles, fetch };\r\n"]},"metadata":{},"sourceType":"module"}