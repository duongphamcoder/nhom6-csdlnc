{"ast":null,"code":"import { LayerAction } from \"./layer/LayerAction.js\";\n/**\r\n * @description Adds a video, text or an image layer as an overlay over the base layer. </br>\r\n * @memberOf Actions\r\n * @namespace Overlay\r\n * @see Visit {@link Qualifiers.TextStyle|TextStyle} for advanced text options\r\n * @see {@link Actions.Underlay| The underlay action}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const myVideo = yourCldInstance.video('dog');\r\n *\r\n * import {source} from \"@cloudinary/url-gen/actions/overlay\"\r\n * import {image, video, text} from \"@cloudinary/url-gen/qualifiers/source\"\r\n * import {TextStyle} from '@cloudinary/url-gen/qualifiers/textStyle\r\n *\r\n * myVideo.overlay(\r\n *       source(image('myImage'))\r\n *     )\r\n *\r\n * myVideo.overlay(\r\n *       source(video('myVideo'))\r\n *     )\r\n *\r\n * myVideo.overlay(\r\n *       source(text('My text'), 'arial_15')\r\n *     )\r\n *\r\n * // Or a text with more complex options\r\n * myVideo.overlay(\r\n *       source(text('My text'), new TextStyle('arial', 50))\r\n *     )\r\n */\n\n/**\r\n * @summary action\r\n * @memberOf Actions.Overlay\r\n * @description Adds a layer for an asset\r\n * @param {Qualifiers.Source.ImageSource | Qualifiers.Source.TextSource | Qualifiers.Source.VideoSource} source\r\n *        The Source used for the layer, use the functions provided {@link Qualifiers.Source|here} to easily create these objects\r\n * @return {SDK.LayerAction}\r\n */\n\nfunction source(source) {\n  return new LayerAction(source).setLayerType('l');\n}\n\nconst Overlay = {\n  source\n};\nexport { Overlay, source };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/actions/overlay.js"],"names":["LayerAction","source","setLayerType","Overlay"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBA,MAAhB,EAAwB;AACpB,SAAO,IAAID,WAAJ,CAAgBC,MAAhB,EACFC,YADE,CACW,GADX,CAAP;AAEH;;AACD,MAAMC,OAAO,GAAG;AAAEF,EAAAA;AAAF,CAAhB;AACA,SAASE,OAAT,EAAkBF,MAAlB","sourcesContent":["import { LayerAction } from \"./layer/LayerAction.js\";\r\n/**\r\n * @description Adds a video, text or an image layer as an overlay over the base layer. </br>\r\n * @memberOf Actions\r\n * @namespace Overlay\r\n * @see Visit {@link Qualifiers.TextStyle|TextStyle} for advanced text options\r\n * @see {@link Actions.Underlay| The underlay action}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const myVideo = yourCldInstance.video('dog');\r\n *\r\n * import {source} from \"@cloudinary/url-gen/actions/overlay\"\r\n * import {image, video, text} from \"@cloudinary/url-gen/qualifiers/source\"\r\n * import {TextStyle} from '@cloudinary/url-gen/qualifiers/textStyle\r\n *\r\n * myVideo.overlay(\r\n *       source(image('myImage'))\r\n *     )\r\n *\r\n * myVideo.overlay(\r\n *       source(video('myVideo'))\r\n *     )\r\n *\r\n * myVideo.overlay(\r\n *       source(text('My text'), 'arial_15')\r\n *     )\r\n *\r\n * // Or a text with more complex options\r\n * myVideo.overlay(\r\n *       source(text('My text'), new TextStyle('arial', 50))\r\n *     )\r\n */\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Overlay\r\n * @description Adds a layer for an asset\r\n * @param {Qualifiers.Source.ImageSource | Qualifiers.Source.TextSource | Qualifiers.Source.VideoSource} source\r\n *        The Source used for the layer, use the functions provided {@link Qualifiers.Source|here} to easily create these objects\r\n * @return {SDK.LayerAction}\r\n */\r\nfunction source(source) {\r\n    return new LayerAction(source)\r\n        .setLayerType('l');\r\n}\r\nconst Overlay = { source };\r\nexport { Overlay, source };\r\n"]},"metadata":{},"sourceType":"module"}