{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\r\n * @description\r\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\r\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#replace_color_effect|Replace colors example}\r\n * @memberOf Actions.Adjust\r\n */\n\nclass ReplaceColorAction extends Action {\n  /**\r\n   * @description Sets the target output color.\r\n   * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\r\n   */\n  constructor(toColor) {\n    super();\n    this.targetColor = toColor;\n  }\n  /**\r\n   * @description Sets the tolerance threshold.\r\n   * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\r\n   *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\r\n   *                                  Larger values result in replacing more colors within the image. </br>\r\n   *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\r\n   * @return {this}\r\n   */\n\n\n  tolerance(toleranceLevel) {\n    this.toleranceLevel = toleranceLevel;\n    return this;\n  }\n  /**\r\n   * @description Sets the base input color to map.\r\n   * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\r\n   * @return {this}\r\n   */\n\n\n  fromColor(baseColor) {\n    this.baseColor = baseColor;\n    return this;\n  }\n\n  prepareQualifiers() {\n    // Target color and base color might not exist at this point (optional qualifiers)\n    // If they exist, ensure that any # for RGB are removed from the resulting string\n    const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n    const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n    const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n\n}\n\nexport { ReplaceColorAction };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/actions/adjust/ReplaceColorAction.js"],"names":["Action","QualifierValue","Qualifier","ReplaceColorAction","constructor","toColor","targetColor","tolerance","toleranceLevel","fromColor","baseColor","prepareQualifiers","toString","replace","qualifierValue","addQualifier"],"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAN,SAAiCH,MAAjC,CAAwC;AACpC;AACJ;AACA;AACA;AACII,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB;AACA,SAAKC,WAAL,GAAmBD,OAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,SAAS,CAACC,cAAD,EAAiB;AACtB,SAAKA,cAAL,GAAsBA,cAAtB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACjB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACA,UAAML,WAAW,GAAG,KAAKA,WAAL,IAAoB,KAAKA,WAAL,CAAiBM,QAAjB,GAA4BC,OAA5B,CAAoC,GAApC,EAAyC,EAAzC,CAAxC;AACA,UAAMH,SAAS,GAAG,KAAKA,SAAL,IAAkB,KAAKA,SAAL,CAAeE,QAAf,GAA0BC,OAA1B,CAAkC,GAAlC,EAAuC,EAAvC,CAApC;AACA,UAAMC,cAAc,GAAG,IAAIb,cAAJ,CAAmB,CAAC,eAAD,EAAkBK,WAAlB,EAA+B,KAAKE,cAApC,EAAoDE,SAApD,CAAnB,CAAvB;AACA,SAAKK,YAAL,CAAkB,IAAIb,SAAJ,CAAc,GAAd,EAAmBY,cAAnB,CAAlB;AACA,WAAO,IAAP;AACH;;AAtCmC;;AAwCxC,SAASX,kBAAT","sourcesContent":["import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description\r\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\r\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#replace_color_effect|Replace colors example}\r\n * @memberOf Actions.Adjust\r\n */\r\nclass ReplaceColorAction extends Action {\r\n    /**\r\n     * @description Sets the target output color.\r\n     * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\r\n     */\r\n    constructor(toColor) {\r\n        super();\r\n        this.targetColor = toColor;\r\n    }\r\n    /**\r\n     * @description Sets the tolerance threshold.\r\n     * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\r\n     *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\r\n     *                                  Larger values result in replacing more colors within the image. </br>\r\n     *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\r\n     * @return {this}\r\n     */\r\n    tolerance(toleranceLevel) {\r\n        this.toleranceLevel = toleranceLevel;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the base input color to map.\r\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\r\n     * @return {this}\r\n     */\r\n    fromColor(baseColor) {\r\n        this.baseColor = baseColor;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        // Target color and base color might not exist at this point (optional qualifiers)\r\n        // If they exist, ensure that any # for RGB are removed from the resulting string\r\n        const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\r\n        const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\r\n        const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport { ReplaceColorAction };\r\n"]},"metadata":{},"sourceType":"module"}