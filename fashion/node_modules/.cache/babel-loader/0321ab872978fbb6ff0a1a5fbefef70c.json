{"ast":null,"code":"import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\r\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\r\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\r\n */\n\nexport const SEO_TYPES = {\n  \"image/upload\": \"images\",\n  \"image/private\": \"private_images\",\n  \"image/authenticated\": \"authenticated_images\",\n  \"raw/upload\": \"files\",\n  \"video/upload\": \"videos\"\n};\n/**\r\n * @description Cloudinary file without a transformation\r\n * @summary SDK\r\n * @memberOf SDK\r\n */\n\nclass CloudinaryFile {\n  constructor(publicID) {\n    let cloudConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let urlConfig = arguments.length > 2 ? arguments[2] : undefined;\n    this.setPublicID(publicID);\n    this.setCloudConfig(cloudConfig);\n    this.setURLConfig(urlConfig);\n  }\n  /**\r\n   * @description Sets the URL Config for this asset\r\n   * @param urlConfig\r\n   * @return {this}\r\n   */\n\n\n  setURLConfig(urlConfig) {\n    this.urlConfig = new URLConfig(urlConfig);\n    return this;\n  }\n  /**\r\n   * @description Sets the Cloud Config for this asset\r\n   * @param urlConfig\r\n   * @return {this}\r\n   */\n\n\n  setCloudConfig(cloudConfig) {\n    this.cloudName = cloudConfig.cloudName;\n    this.apiKey = cloudConfig.apiKey;\n    this.apiSecret = cloudConfig.apiSecret;\n    this.authToken = cloudConfig.authToken;\n    return this;\n  }\n  /**\r\n   * @description Sets the public ID of the asset.\r\n   * @param {string} publicID The public ID of the asset.\r\n   * @return {this}\r\n   */\n\n\n  setPublicID(publicID) {\n    // PublicID must be a string!\n    this.publicID = publicID ? publicID.toString() : '';\n    return this;\n  }\n  /**\r\n   * @description Sets the delivery type of the asset.\r\n   * @param {DELIVERY_TYPE | string} newType The type of the asset.\r\n   * @return {this}\r\n   */\n\n\n  setDeliveryType(newType) {\n    this.deliveryType = newType;\n    return this;\n  }\n  /**\r\n   * @description Sets the URL SEO suffix of the asset.\r\n   * @param {string} newSuffix The SEO suffix.\r\n   * @return {this}\r\n   */\n\n\n  setSuffix(newSuffix) {\n    this.suffix = newSuffix;\n    return this;\n  }\n  /**\r\n   * @description Sets the signature of the asset.\r\n   * @param {string} signature The signature.\r\n   * @return {this}\r\n   */\n\n\n  setSignature(signature) {\n    this.signature = signature;\n    return this;\n  }\n  /**\r\n   * @description Sets the version of the asset.\r\n   * @param {string} newVersion The version of the asset.\r\n   * @return {this}\r\n   */\n\n\n  setVersion(newVersion) {\n    if (newVersion) {\n      this.version = newVersion;\n    }\n\n    return this;\n  }\n  /**\r\n   * @description Sets the asset type.\r\n   * @param {string} newType The type of the asset.\r\n   * @return {this}\r\n   */\n\n\n  setAssetType(newType) {\n    if (newType) {\n      this.assetType = newType;\n    }\n\n    return this;\n  }\n\n  sign() {\n    return this;\n  }\n  /**\r\n   * @description Serializes to URL string\r\n   * @param overwriteOptions\r\n   */\n\n\n  toURL() {\n    let overwriteOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n  }\n  /**\r\n   * @description Validate various options before attempting to create a URL\r\n   * The function will throw in case a violation\r\n   * @throws Validation errors\r\n   */\n\n\n  validateAssetForURLCreation() {\n    if (typeof this.cloudName === 'undefined') {\n      throw 'You must supply a cloudName when initializing the asset';\n    }\n\n    const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n    const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n\n    if (suffixContainsDot || suffixContainsSlash) {\n      throw '`suffix`` should not include . or /';\n    }\n  }\n  /**\r\n   * @description return an SEO friendly name for a combination of asset/delivery, some examples:\r\n   * * image/upload -> images\r\n   * * video/upload -> videos\r\n   * If no match is found, return `{asset}/{delivery}`\r\n   */\n\n\n  getResourceType() {\n    const assetType = handleAssetType(this.assetType);\n    const deliveryType = handleDeliveryType(this.deliveryType);\n    const hasSuffix = !!this.suffix;\n    const regularSEOType = `${assetType}/${deliveryType}`;\n    const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n    const useRootPath = this.urlConfig.useRootPath;\n    const shorten = this.urlConfig.shorten; // Quick exit incase of useRootPath\n\n    if (useRootPath) {\n      if (regularSEOType === 'image/upload') {\n        return ''; // For image/upload we're done, just return nothing\n      } else {\n        throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n      }\n    }\n\n    if (shorten && regularSEOType === 'image/upload') {\n      return 'iu';\n    }\n\n    if (hasSuffix) {\n      if (shortSEOType) {\n        return shortSEOType;\n      } else {\n        throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n      }\n    } // If all else fails, return the regular image/upload combination (asset/delivery)\n\n\n    return regularSEOType;\n  }\n\n  getSignature() {\n    if (this.signature) {\n      return `s--${this.signature}--`;\n    } else {\n      return '';\n    }\n  }\n  /**\r\n   *\r\n   * @description Creates a fully qualified CloudinaryURL\r\n   * @return {string} CloudinaryURL\r\n   * @throws Validation Errors\r\n   */\n\n\n  createCloudinaryURL(transformation, trackedAnalytics) {\n    // In accordance with the existing implementation, if no publicID exists we should return nothing.\n    if (!this.publicID) {\n      return '';\n    } // Throws if some options are mis-configured\n    // See the function for more information on when it throws\n\n\n    this.validateAssetForURLCreation();\n    const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n    const transformationString = transformation ? transformation.toString() : '';\n    const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n    const publicID = this.publicID // Serialize the publicID, but leave slashes alone.\n    // we can't use serializeCloudinaryCharacters because that does both things (, and /)\n    .replace(/,/g, '%2C'); // Resource type is a mixture of assetType, deliveryType and various URL Configurations\n    // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\n\n    const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix].filter(a => a).join('/');\n\n    if (typeof transformation === 'string') {\n      return url;\n    } else {\n      const safeURL = encodeURI(url).replace(/\\?/g, '%3F').replace(/=/g, '%3D'); // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\n      // Don't add analytics when publicId includes a '?' to not risk changing existing query params\n\n      if (this.urlConfig.analytics !== false && !publicID.includes('?')) {\n        return `${safeURL}?_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n      } else {\n        return safeURL;\n      }\n    }\n  }\n\n}\n\nexport { CloudinaryFile };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/assets/CloudinaryFile.js"],"names":["getUrlPrefix","getUrlVersion","handleAssetType","handleDeliveryType","URLConfig","getSDKAnalyticsSignature","SEO_TYPES","CloudinaryFile","constructor","publicID","cloudConfig","urlConfig","setPublicID","setCloudConfig","setURLConfig","cloudName","apiKey","apiSecret","authToken","toString","setDeliveryType","newType","deliveryType","setSuffix","newSuffix","suffix","setSignature","signature","setVersion","newVersion","version","setAssetType","assetType","sign","toURL","overwriteOptions","createCloudinaryURL","trackedAnalytics","validateAssetForURLCreation","suffixContainsDot","indexOf","suffixContainsSlash","getResourceType","hasSuffix","regularSEOType","shortSEOType","useRootPath","shorten","Error","Object","keys","join","getSignature","transformation","prefix","transformationString","forceVersion","replace","url","filter","a","safeURL","encodeURI","analytics","includes"],"mappings":"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","sourcesContent":["import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\r\nimport URLConfig from \"../config/URLConfig.js\";\r\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\r\n/**\r\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\r\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\r\n */\r\nexport const SEO_TYPES = {\r\n    \"image/upload\": \"images\",\r\n    \"image/private\": \"private_images\",\r\n    \"image/authenticated\": \"authenticated_images\",\r\n    \"raw/upload\": \"files\",\r\n    \"video/upload\": \"videos\"\r\n};\r\n/**\r\n * @description Cloudinary file without a transformation\r\n * @summary SDK\r\n * @memberOf SDK\r\n */\r\nclass CloudinaryFile {\r\n    constructor(publicID, cloudConfig = {}, urlConfig) {\r\n        this.setPublicID(publicID);\r\n        this.setCloudConfig(cloudConfig);\r\n        this.setURLConfig(urlConfig);\r\n    }\r\n    /**\r\n     * @description Sets the URL Config for this asset\r\n     * @param urlConfig\r\n     * @return {this}\r\n     */\r\n    setURLConfig(urlConfig) {\r\n        this.urlConfig = new URLConfig(urlConfig);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the Cloud Config for this asset\r\n     * @param urlConfig\r\n     * @return {this}\r\n     */\r\n    setCloudConfig(cloudConfig) {\r\n        this.cloudName = cloudConfig.cloudName;\r\n        this.apiKey = cloudConfig.apiKey;\r\n        this.apiSecret = cloudConfig.apiSecret;\r\n        this.authToken = cloudConfig.authToken;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the public ID of the asset.\r\n     * @param {string} publicID The public ID of the asset.\r\n     * @return {this}\r\n     */\r\n    setPublicID(publicID) {\r\n        // PublicID must be a string!\r\n        this.publicID = publicID ? publicID.toString() : '';\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the delivery type of the asset.\r\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\r\n     * @return {this}\r\n     */\r\n    setDeliveryType(newType) {\r\n        this.deliveryType = newType;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the URL SEO suffix of the asset.\r\n     * @param {string} newSuffix The SEO suffix.\r\n     * @return {this}\r\n     */\r\n    setSuffix(newSuffix) {\r\n        this.suffix = newSuffix;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the signature of the asset.\r\n     * @param {string} signature The signature.\r\n     * @return {this}\r\n     */\r\n    setSignature(signature) {\r\n        this.signature = signature;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the version of the asset.\r\n     * @param {string} newVersion The version of the asset.\r\n     * @return {this}\r\n     */\r\n    setVersion(newVersion) {\r\n        if (newVersion) {\r\n            this.version = newVersion;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the asset type.\r\n     * @param {string} newType The type of the asset.\r\n     * @return {this}\r\n     */\r\n    setAssetType(newType) {\r\n        if (newType) {\r\n            this.assetType = newType;\r\n        }\r\n        return this;\r\n    }\r\n    sign() {\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Serializes to URL string\r\n     * @param overwriteOptions\r\n     */\r\n    toURL(overwriteOptions = {}) {\r\n        return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\r\n    }\r\n    /**\r\n     * @description Validate various options before attempting to create a URL\r\n     * The function will throw in case a violation\r\n     * @throws Validation errors\r\n     */\r\n    validateAssetForURLCreation() {\r\n        if (typeof this.cloudName === 'undefined') {\r\n            throw 'You must supply a cloudName when initializing the asset';\r\n        }\r\n        const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\r\n        const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\r\n        if (suffixContainsDot || suffixContainsSlash) {\r\n            throw '`suffix`` should not include . or /';\r\n        }\r\n    }\r\n    /**\r\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\r\n     * * image/upload -> images\r\n     * * video/upload -> videos\r\n     * If no match is found, return `{asset}/{delivery}`\r\n     */\r\n    getResourceType() {\r\n        const assetType = handleAssetType(this.assetType);\r\n        const deliveryType = handleDeliveryType(this.deliveryType);\r\n        const hasSuffix = !!this.suffix;\r\n        const regularSEOType = `${assetType}/${deliveryType}`;\r\n        const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\r\n        const useRootPath = this.urlConfig.useRootPath;\r\n        const shorten = this.urlConfig.shorten;\r\n        // Quick exit incase of useRootPath\r\n        if (useRootPath) {\r\n            if (regularSEOType === 'image/upload') {\r\n                return ''; // For image/upload we're done, just return nothing\r\n            }\r\n            else {\r\n                throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\r\n            }\r\n        }\r\n        if (shorten && regularSEOType === 'image/upload') {\r\n            return 'iu';\r\n        }\r\n        if (hasSuffix) {\r\n            if (shortSEOType) {\r\n                return shortSEOType;\r\n            }\r\n            else {\r\n                throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\r\n            }\r\n        }\r\n        // If all else fails, return the regular image/upload combination (asset/delivery)\r\n        return regularSEOType;\r\n    }\r\n    getSignature() {\r\n        if (this.signature) {\r\n            return `s--${this.signature}--`;\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @description Creates a fully qualified CloudinaryURL\r\n     * @return {string} CloudinaryURL\r\n     * @throws Validation Errors\r\n     */\r\n    createCloudinaryURL(transformation, trackedAnalytics) {\r\n        // In accordance with the existing implementation, if no publicID exists we should return nothing.\r\n        if (!this.publicID) {\r\n            return '';\r\n        }\r\n        // Throws if some options are mis-configured\r\n        // See the function for more information on when it throws\r\n        this.validateAssetForURLCreation();\r\n        const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\r\n        const transformationString = transformation ? transformation.toString() : '';\r\n        const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\r\n        const publicID = this.publicID\r\n            // Serialize the publicID, but leave slashes alone.\r\n            // we can't use serializeCloudinaryCharacters because that does both things (, and /)\r\n            .replace(/,/g, '%2C');\r\n        // Resource type is a mixture of assetType, deliveryType and various URL Configurations\r\n        // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\r\n        const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix]\r\n            .filter((a) => a)\r\n            .join('/');\r\n        if (typeof transformation === 'string') {\r\n            return url;\r\n        }\r\n        else {\r\n            const safeURL = encodeURI(url)\r\n                .replace(/\\?/g, '%3F')\r\n                .replace(/=/g, '%3D');\r\n            // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\r\n            // Don't add analytics when publicId includes a '?' to not risk changing existing query params\r\n            if (this.urlConfig.analytics !== false && !(publicID.includes('?'))) {\r\n                return `${safeURL}?_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\r\n            }\r\n            else {\r\n                return safeURL;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport { CloudinaryFile };\r\n"]},"metadata":{},"sourceType":"module"}