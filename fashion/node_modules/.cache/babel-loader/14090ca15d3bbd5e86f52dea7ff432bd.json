{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\r\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_improvement_effects|Image improvement effects}\r\n * @memberOf Actions.Adjust\r\n */\n\nclass ImproveAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {\n      actionType: 'improve'\n    };\n  }\n  /**\r\n   *\r\n   * @description The improve mode.\r\n   * @param {Qualifiers.ImproveMode | string} value\r\n   */\n\n\n  mode(value) {\n    this.modeValue = value;\n    this._actionModel.mode = value;\n    return this;\n  }\n  /**\r\n   * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\r\n   * @param {number} value\r\n   */\n\n\n  blend(value) {\n    this.blendValue = value;\n    this._actionModel.blend = value;\n    return this;\n  }\n\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      mode,\n      blend\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this();\n    mode && result.mode(mode);\n    blend && result.blend(blend);\n    return result;\n  }\n\n}\n\nexport { ImproveAction };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/actions/adjust/ImproveAction.js"],"names":["Action","QualifierValue","Qualifier","ImproveAction","constructor","_actionModel","actionType","mode","value","modeValue","blend","blendValue","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","fromJson","actionModel","result"],"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BH,MAA5B,CAAmC;AAC/BI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAApB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACR,SAAKC,SAAL,GAAiBD,KAAjB;AACA,SAAKH,YAAL,CAAkBE,IAAlB,GAAyBC,KAAzB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,KAAK,CAACF,KAAD,EAAQ;AACT,SAAKG,UAAL,GAAkBH,KAAlB;AACA,SAAKH,YAAL,CAAkBK,KAAlB,GAA0BF,KAA1B;AACA,WAAO,IAAP;AACH;;AACDI,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,cAAc,GAAG,IAAIZ,cAAJ,CAAmB,CAAC,SAAD,EAAY,KAAKQ,SAAjB,EAA4B,KAAKE,UAAjC,CAAnB,EAAiEG,YAAjE,CAA8E,GAA9E,CAAvB;AACA,SAAKC,YAAL,CAAkB,IAAIb,SAAJ,CAAc,GAAd,EAAmBW,cAAnB,CAAlB;AACA,WAAO,IAAP;AACH;;AACc,SAARG,QAAQ,CAACC,WAAD,EAAc;AACzB,UAAM;AAAEV,MAAAA,IAAF;AAAQG,MAAAA;AAAR,QAAkBO,WAAxB,CADyB,CAEzB;AACA;;AACA,UAAMC,MAAM,GAAG,IAAI,IAAJ,EAAf;AACAX,IAAAA,IAAI,IAAIW,MAAM,CAACX,IAAP,CAAYA,IAAZ,CAAR;AACAG,IAAAA,KAAK,IAAIQ,MAAM,CAACR,KAAP,CAAaA,KAAb,CAAT;AACA,WAAOQ,MAAP;AACH;;AArC8B;;AAuCnC,SAASf,aAAT","sourcesContent":["import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_improvement_effects|Image improvement effects}\r\n * @memberOf Actions.Adjust\r\n */\r\nclass ImproveAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = { actionType: 'improve' };\r\n    }\r\n    /**\r\n     *\r\n     * @description The improve mode.\r\n     * @param {Qualifiers.ImproveMode | string} value\r\n     */\r\n    mode(value) {\r\n        this.modeValue = value;\r\n        this._actionModel.mode = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\r\n     * @param {number} value\r\n     */\r\n    blend(value) {\r\n        this.blendValue = value;\r\n        this._actionModel.blend = value;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { mode, blend } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        mode && result.mode(mode);\r\n        blend && result.blend(blend);\r\n        return result;\r\n    }\r\n}\r\nexport { ImproveAction };\r\n"]},"metadata":{},"sourceType":"module"}