{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseSource}\r\n * @description Defines how to manipulate an image layer\r\n * <div class=\"panel panel-warning\">\r\n *   <div class=\"panel-heading\">Notice</div>\r\n *   <div class=\"panel-body\">\r\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\r\n *     You can find regular images and videos transformations below:\r\n *   </div>\r\n *   <ul>\r\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\r\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\r\n *   </ul>\r\n * </div>\r\n */\n\nclass ImageSource extends BaseSource {\n  constructor(publicID) {\n    super();\n    this._publicID = publicID;\n    this._qualifierModel = {\n      publicId: publicID,\n      sourceType: 'image'\n    };\n  }\n  /**\r\n   * @description\r\n   * Returns the opening string of the layer,\r\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n   * @returns {string}\r\n   */\n\n\n  getOpenSourceString(layerType) {\n    const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n\n    if (this._format) {\n      return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n    } else {\n      return `${layerType}_${encodedPublicID}`;\n    }\n  }\n  /**\r\n   * @description\r\n   * Apply a format for the image source of the layer\r\n   * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\r\n   * @returns {this}\r\n   */\n\n\n  format(format) {\n    this._format = format;\n    return this;\n  }\n\n  toJson() {\n    const result = super.toJson();\n\n    if (result.publicId && this._format) {\n      result.publicId = `${result.publicId}.${this._format.toString()}`;\n    }\n\n    return result;\n  }\n\n  static fromJson(qualifierModel, transformationFromJson) {\n    const {\n      publicId,\n      transformation\n    } = qualifierModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n    // This allows the inheriting classes to determine the class to be created\n    // @ts-ignore\n\n    const result = new this(publicId);\n\n    if (transformation) {\n      result.transformation(transformationFromJson(transformation));\n    }\n\n    return result;\n  }\n\n}\n\nexport { ImageSource };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/nhom6-csdlnc/fashion/node_modules/@cloudinary/url-gen/qualifiers/source/sourceTypes/ImageSource.js"],"names":["BaseSource","ImageSource","constructor","publicID","_publicID","_qualifierModel","publicId","sourceType","getOpenSourceString","layerType","encodedPublicID","encodeAssetPublicID","_format","toString","format","toJson","result","fromJson","qualifierModel","transformationFromJson","transformation"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BD,UAA1B,CAAqC;AACjCE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB;AACA,SAAKC,SAAL,GAAiBD,QAAjB;AACA,SAAKE,eAAL,GAAuB;AACnBC,MAAAA,QAAQ,EAAEH,QADS;AAEnBI,MAAAA,UAAU,EAAE;AAFO,KAAvB;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,mBAAmB,CAACC,SAAD,EAAY;AAC3B,UAAMC,eAAe,GAAG,KAAKC,mBAAL,CAAyB,KAAKP,SAA9B,CAAxB;;AACA,QAAI,KAAKQ,OAAT,EAAkB;AACd,aAAQ,GAAEH,SAAU,IAAGC,eAAgB,IAAG,KAAKE,OAAL,CAAaC,QAAb,EAAwB,EAAlE;AACH,KAFD,MAGK;AACD,aAAQ,GAAEJ,SAAU,IAAGC,eAAgB,EAAvC;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,MAAM,CAACA,MAAD,EAAS;AACX,SAAKF,OAAL,GAAeE,MAAf;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,GAAG,MAAMD,MAAN,EAAf;;AACA,QAAIC,MAAM,CAACV,QAAP,IAAmB,KAAKM,OAA5B,EAAqC;AACjCI,MAAAA,MAAM,CAACV,QAAP,GAAmB,GAAEU,MAAM,CAACV,QAAS,IAAG,KAAKM,OAAL,CAAaC,QAAb,EAAwB,EAAhE;AACH;;AACD,WAAOG,MAAP;AACH;;AACc,SAARC,QAAQ,CAACC,cAAD,EAAiBC,sBAAjB,EAAyC;AACpD,UAAM;AAAEb,MAAAA,QAAF;AAAYc,MAAAA;AAAZ,QAA+BF,cAArC,CADoD,CAEpD;AACA;AACA;;AACA,UAAMF,MAAM,GAAG,IAAI,IAAJ,CAASV,QAAT,CAAf;;AACA,QAAIc,cAAJ,EAAoB;AAChBJ,MAAAA,MAAM,CAACI,cAAP,CAAsBD,sBAAsB,CAACC,cAAD,CAA5C;AACH;;AACD,WAAOJ,MAAP;AACH;;AAnDgC;;AAqDrC,SAASf,WAAT","sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseSource}\r\n * @description Defines how to manipulate an image layer\r\n * <div class=\"panel panel-warning\">\r\n *   <div class=\"panel-heading\">Notice</div>\r\n *   <div class=\"panel-body\">\r\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\r\n *     You can find regular images and videos transformations below:\r\n *   </div>\r\n *   <ul>\r\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\r\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\r\n *   </ul>\r\n * </div>\r\n */\r\nclass ImageSource extends BaseSource {\r\n    constructor(publicID) {\r\n        super();\r\n        this._publicID = publicID;\r\n        this._qualifierModel = {\r\n            publicId: publicID,\r\n            sourceType: 'image'\r\n        };\r\n    }\r\n    /**\r\n     * @description\r\n     * Returns the opening string of the layer,\r\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n     * @returns {string}\r\n     */\r\n    getOpenSourceString(layerType) {\r\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\r\n        if (this._format) {\r\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\r\n        }\r\n        else {\r\n            return `${layerType}_${encodedPublicID}`;\r\n        }\r\n    }\r\n    /**\r\n     * @description\r\n     * Apply a format for the image source of the layer\r\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\r\n     * @returns {this}\r\n     */\r\n    format(format) {\r\n        this._format = format;\r\n        return this;\r\n    }\r\n    toJson() {\r\n        const result = super.toJson();\r\n        if (result.publicId && this._format) {\r\n            result.publicId = `${result.publicId}.${this._format.toString()}`;\r\n        }\r\n        return result;\r\n    }\r\n    static fromJson(qualifierModel, transformationFromJson) {\r\n        const { publicId, transformation } = qualifierModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        // @ts-ignore\r\n        const result = new this(publicId);\r\n        if (transformation) {\r\n            result.transformation(transformationFromJson(transformation));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { ImageSource };\r\n"]},"metadata":{},"sourceType":"module"}