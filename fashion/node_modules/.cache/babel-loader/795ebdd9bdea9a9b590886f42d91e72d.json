{"ast":null,"code":"import { BlurAction } from \"./effect/blur/Blur.js\";\nimport { AccelerationEffectAction } from \"./effect/leveled/Accelerate.js\";\nimport { LoopEffectAction } from \"./effect/leveled/Loop.js\";\nimport { CartoonifyEffect } from \"./effect/Cartoonify.js\";\nimport { EffectOutline } from \"./effect/Outline.js\";\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\nimport { MakeTransparentEffectAction } from \"./effect/leveled/MakeTransparent.js\";\nimport { VectorizeEffectAction } from \"./effect/Vectorize.js\";\nimport { SimulateColorBlindEffectAction } from \"./effect/SimulateColorBlind.js\";\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\nimport { AssistColorBlindEffectAction } from \"./effect/AssistColorBlind.js\";\nimport { GradientFadeEffectAction } from \"./effect/GradientFade.js\";\nimport { FadeOutEffectAction } from \"./effect/leveled/FadeOut.js\";\nimport { ColorizeEffectAction } from \"./effect/Colorize.js\";\nimport { ShadowEffectAction } from \"./effect/Shadow.js\";\nimport { StyleTransfer } from \"./effect/StyleTransfer.js\";\nimport { DitherEffectAction } from \"./effect/Dither.js\";\nimport { DeshakeEffectAction } from \"./effect/leveled/Deshake.js\";\nimport { Pixelate } from \"./effect/pixelate/Pixelate.js\";\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\nimport { BlackwhiteEffectAction } from \"./effect/leveled/Blackwhite.js\";\nimport { FadeInEffectAction } from \"./effect/leveled/FadeIn.js\";\nimport { RemoveBackgroundAction } from \"./effect/RemoveBackgroundAction.js\";\nimport { ThemeEffect } from \"./effect/Theme.js\";\n/**\r\n * @summary action\r\n * @description Applies a blurring filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.BlurAction}\r\n */\n\nfunction blur(blurLevel) {\n  return new BlurAction(blurLevel);\n}\n/**\r\n * @summary action\r\n * @description Converts the image to gray-scale (multiple shades of gray).\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction grayscale() {\n  return new SimpleEffectAction('grayscale');\n}\n/**\r\n * @summary action\r\n * @description Changes the color scheme of the image to sepia.\r\n * @memberOf Actions.Effect\r\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\n\n\nfunction sepia(level) {\n  return new EffectActionWithLevel('sepia', level);\n}\n/**\r\n * @summary action\r\n * @description Applies a shadow filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param shadowLevel\r\n * @return {Actions.Effect.ShadowEffectAction}\r\n */\n\n\nfunction shadow(shadowLevel) {\n  return new ShadowEffectAction('shadow', shadowLevel);\n}\n/**\r\n * @summary action\r\n * @description Applies a colorizing filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\r\n * @return {Actions.Effect.ColorizeEffectAction}\r\n */\n\n\nfunction colorize(colorizeLevel) {\n  return new ColorizeEffectAction('colorize', colorizeLevel);\n}\n/**\r\n * @summary action\r\n * @description Applies an oilPaint filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\n\n\nfunction oilPaint(oilPaintLevel) {\n  return new EffectActionWithStrength('oil_paint', oilPaintLevel);\n}\n/**\r\n * @summary action\r\n * @description Applies an artistic filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {ArtisticFilterType | string} artisticFilterType\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction artisticFilter(artisticFilterType) {\n  return new SimpleEffectAction('art', artisticFilterType);\n}\n/**\r\n * @summary action\r\n * @description Applies a cartoonify effect to the asset.\r\n * @memberOf Actions.Effect\r\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\r\n * @return {Actions.Effect.CartoonifyEffect}\r\n */\n\n\nfunction cartoonify(cartoonifyLevel) {\n  return new CartoonifyEffect('cartoonify', cartoonifyLevel);\n}\n/**\r\n * @summary action\r\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.EffectOutline}\r\n */\n\n\nfunction outline() {\n  return new EffectOutline();\n}\n/**\r\n * @summary action\r\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon|Neural Artwork Style Transfer}\r\n * @memberOf Actions.Effect\r\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/url-gen/qualifiers/sources`\r\n * @return {Actions.Effect.StyleTransfer}\r\n */\n\n\nfunction styleTransfer(imageSource) {\n  return new StyleTransfer(imageSource);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Causes a video clip to play forwards and then backwards.\r\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\r\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction boomerang() {\n  return new SimpleEffectAction('boomerang');\n}\n/**\r\n * @summary action\r\n * @description\r\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\r\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction advancedRedEye() {\n  return new SimpleEffectAction('adv_redeye');\n}\n/**\r\n * @summary action\r\n * @description Converts the image to black and white.\r\n * @memberOf Actions.Effect\r\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\r\n * @return {Actions.Effect.BlackwhiteEffectAction}\r\n */\n\n\nfunction blackwhite(level) {\n  return new BlackwhiteEffectAction('blackwhite', level);\n}\n/**\r\n * @summary action\r\n * @description Negates the image colors (negative).\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction negate() {\n  return new SimpleEffectAction('negate');\n}\n/**\r\n * @summary action\r\n * @description Removes red eyes in the image.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction redEye() {\n  return new SimpleEffectAction('redeye');\n}\n/**\r\n * @summary action\r\n * @description Plays the video or audio file in reverse.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction reverse() {\n  return new SimpleEffectAction('reverse');\n}\n/**\r\n * @summary action\r\n * @description Changes the speed of the video playback.\r\n * @memberOf Actions.Effect\r\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\r\n * @return {Actions.Effect.AccelerationEffectAction}\r\n */\n\n\nfunction accelerate(speedIncreasePercent) {\n  return new AccelerationEffectAction(speedIncreasePercent);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Fade in at the beginning of the video.\r\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\r\n * @return {Actions.Effect.FadeInEffectAction}\r\n */\n\n\nfunction fadeIn(fadeLength) {\n  return new FadeInEffectAction(fadeLength);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Fade out at the end of the video.\r\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\r\n * @return {Actions.Effect.FadeoutEffectAction}\r\n */\n\n\nfunction fadeOut(fadeLength) {\n  return new FadeOutEffectAction(fadeLength);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\r\n * The total number of iterations is the number of additional loops plus one. <br/>\r\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\r\n * @memberOf Actions.Effect\r\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\r\n * @return {Actions.Effect.LoopEffectAction}\r\n */\n\n\nfunction loop(additionalLoops) {\n  return new LoopEffectAction('loop', additionalLoops);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\r\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\r\n *\r\n * @memberOf Actions.Effect\r\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\r\n * @return {Actions.Effect.MakeTransparentEffectAction}\r\n */\n\n\nfunction makeTransparent(tolerance) {\n  return new MakeTransparentEffectAction('make_transparent', tolerance);\n}\n/**\r\n * @summary action\r\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\r\n * @memberOf Actions.Effect\r\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\n\n\nfunction noise(percentage) {\n  return new EffectActionWithLevel('noise', percentage);\n}\n/**\r\n * @summary action\r\n * @description Applies a vignette effect.\r\n * @memberOf Actions.Effect\r\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\n\n\nfunction vignette(strength) {\n  return new EffectActionWithStrength('vignette', strength);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Applies an ordered dither filter to the image.\r\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/url-gen/qualifiers/dither} for ditherType.\r\n * @memberOf Actions.Effect\r\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\r\n * @return {Actions.Effect.DitherEffectAction}\r\n */\n\n\nfunction dither(ditherType) {\n  return new DitherEffectAction('ordered_dither', ditherType);\n}\n/**\r\n * @summary action\r\n * @description\r\n * Vectorizes the image.\r\n * Notes:\r\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\r\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\r\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.VectorizeEffectAction}\r\n */\n\n\nfunction vectorize() {\n  return new VectorizeEffectAction();\n}\n/**\r\n * @summary action\r\n * @description\r\n * Applies a gradient fade effect from one edge of the image.\r\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\r\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\r\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\r\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\r\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\r\n * To apply different amounts of fade to multiple edges, use chained fade effects.\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GradientFadeEffectAction}\r\n */\n\n\nfunction gradientFade() {\n  return new GradientFadeEffectAction();\n}\n/**\r\n * @summary action\r\n * @description\r\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\r\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.AssistColorBlindEffectAction}\r\n */\n\n\nfunction assistColorBlind() {\n  return new AssistColorBlindEffectAction();\n}\n/**\r\n * @summary action\r\n * @description\r\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\r\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\r\n */\n\n\nfunction simulateColorBlind() {\n  return new SimulateColorBlindEffectAction();\n}\n/**\r\n * @summary action\r\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.DeshakeEffectAction}\r\n */\n\n\nfunction deshake(pixels) {\n  return new DeshakeEffectAction('deshake', pixels);\n}\n/**\r\n * @summary action\r\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\r\n * additional layer and specifying the transition effect\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\n\n\nfunction transition() {\n  return new SimpleEffectAction('transition');\n}\n/**\r\n * @summary action\r\n * @description Applies a pixelatering filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.Pixelate}\r\n */\n\n\nfunction pixelate(squareSize) {\n  return new Pixelate(squareSize);\n}\n/**\r\n * @summary action\r\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\r\n *              Use when the background is a uniform color.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval|Background Removal}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.RemoveBackgroundAction}\r\n */\n\n\nfunction removeBackground() {\n  return new RemoveBackgroundAction();\n}\n/**\r\n *\r\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\r\n * @param {SystemColors} color\r\n * @return {Actions.Effect.ThemeEffect}\r\n */\n\n\nfunction theme(color) {\n  return new ThemeEffect(color);\n}\n/**\r\n * @description Defines effects that you can apply to transform your assets.\r\n * @memberOf Actions\r\n * @namespace Effect\r\n * @example\r\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * // Import everything, or just the action you need for tree-shaking purposes\r\n * import {Effect, sepia} from \"@cloudinary/url-gen/actions/effect\";\r\n * import {ArtisticFilter, alDente} from \"../../../src/qualifiers/artisticFilter\";\r\n * import {ShakeStrength, pixels16} from \"../../../src/qualifiers/shakeStrength\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.effect(Effect.advancedRedEye())\r\n * .effect(Effect.accelerate())\r\n * .effect(Effect.accelerate(100))\r\n * .effect(Effect.accelerate().rate(5))\r\n * .effect(Effect.boomerang())\r\n * .effect(Effect.blackwhite())\r\n * .effect(Effect.blackwhite(10))\r\n * .effect(Effect.blackwhite().threshold(20))\r\n * .effect(Effect.fadeIn(100))\r\n * .effect(Effect.fadeIn().duration(5))\r\n * .effect(Effect.fadeOut(100))\r\n * .effect(Effect.fadeOut().duration(5))\r\n * .effect(Effect.grayscale())\r\n * .effect(Effect.loop())\r\n * .effect(Effect.loop(100))\r\n * .effect(Effect.loop().additionalIterations(5))\r\n * .effect(Effect.makeTransparent())\r\n * .effect(Effect.makeTransparent(100))\r\n * .effect(Effect.makeTransparent().tolerance(5))\r\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\r\n * .effect(Effect.noise())\r\n * .effect(Effect.noise(100))\r\n * .effect(Effect.noise().level(5))\r\n * .effect(Effect.negate())\r\n * .effect(Effect.reverse())\r\n * .effect(Effect.redEye())\r\n * .effect(Effect.sepia())\r\n * .effect(Effect.sepia(100))\r\n * .effect(Effect.sepia().level(5))\r\n * .effect(Effect.vignette())\r\n * .effect(Effect.vignette(100))\r\n * .effect(Effect.vignette().strength(5))\r\n * .effect(Effect.deshake())\r\n * .effect(Effect.deshake(10))\r\n * .effect(Effect.artisticFilter(alDente())\r\n * .effect(Effect.deshake().shakeStrength(pixels16()))\r\n */\n\n\nconst Effect = {\n  pixelate: pixelate,\n  deshake: deshake,\n  boomerang: boomerang,\n  advancedRedEye: advancedRedEye,\n  blackwhite,\n  negate: negate,\n  redEye: redEye,\n  reverse: reverse,\n  accelerate: accelerate,\n  fadeIn: fadeIn,\n  fadeOut: fadeOut,\n  loop: loop,\n  makeTransparent: makeTransparent,\n  noise: noise,\n  vignette: vignette,\n  blur: blur,\n  grayscale: grayscale,\n  sepia: sepia,\n  shadow: shadow,\n  colorize: colorize,\n  oilPaint: oilPaint,\n  artisticFilter: artisticFilter,\n  cartoonify: cartoonify,\n  outline: outline,\n  styleTransfer: styleTransfer,\n  gradientFade: gradientFade,\n  vectorize: vectorize,\n  assistColorBlind: assistColorBlind,\n  simulateColorBlind: simulateColorBlind,\n  transition: transition,\n  dither: dither,\n  removeBackground,\n  theme\n};\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, theme };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/actions/effect.js"],"names":["BlurAction","AccelerationEffectAction","LoopEffectAction","CartoonifyEffect","EffectOutline","SimpleEffectAction","MakeTransparentEffectAction","VectorizeEffectAction","SimulateColorBlindEffectAction","EffectActionWithLevel","AssistColorBlindEffectAction","GradientFadeEffectAction","FadeOutEffectAction","ColorizeEffectAction","ShadowEffectAction","StyleTransfer","DitherEffectAction","DeshakeEffectAction","Pixelate","EffectActionWithStrength","BlackwhiteEffectAction","FadeInEffectAction","RemoveBackgroundAction","ThemeEffect","blur","blurLevel","grayscale","sepia","level","shadow","shadowLevel","colorize","colorizeLevel","oilPaint","oilPaintLevel","artisticFilter","artisticFilterType","cartoonify","cartoonifyLevel","outline","styleTransfer","imageSource","boomerang","advancedRedEye","blackwhite","negate","redEye","reverse","accelerate","speedIncreasePercent","fadeIn","fadeLength","fadeOut","loop","additionalLoops","makeTransparent","tolerance","noise","percentage","vignette","strength","dither","ditherType","vectorize","gradientFade","assistColorBlind","simulateColorBlind","deshake","pixels","transition","pixelate","squareSize","removeBackground","theme","color","Effect"],"mappings":"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hB,EAA4B;AACxB,SAAO,IAAI9C,kBAAJ,CAAuB,gBAAvB,EAAyC8C,UAAzC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,GAAqB;AACjB,SAAO,IAAIxD,qBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,YAAT,GAAwB;AACpB,SAAO,IAAIrD,wBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsD,gBAAT,GAA4B;AACxB,SAAO,IAAIvD,4BAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwD,kBAAT,GAA8B;AAC1B,SAAO,IAAI1D,8BAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2D,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,SAAO,IAAInD,mBAAJ,CAAwB,SAAxB,EAAmCmD,MAAnC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAsB;AAClB,SAAO,IAAIhE,kBAAJ,CAAuB,YAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiE,QAAT,CAAkBC,UAAlB,EAA8B;AAC1B,SAAO,IAAIrD,QAAJ,CAAaqD,UAAb,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,GAA4B;AACxB,SAAO,IAAIlD,sBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmD,KAAT,CAAeC,KAAf,EAAsB;AAClB,SAAO,IAAInD,WAAJ,CAAgBmD,KAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG;AACXL,EAAAA,QAAQ,EAAEA,QADC;AAEXH,EAAAA,OAAO,EAAEA,OAFE;AAGXzB,EAAAA,SAAS,EAAEA,SAHA;AAIXC,EAAAA,cAAc,EAAEA,cAJL;AAKXC,EAAAA,UALW;AAMXC,EAAAA,MAAM,EAAEA,MANG;AAOXC,EAAAA,MAAM,EAAEA,MAPG;AAQXC,EAAAA,OAAO,EAAEA,OARE;AASXC,EAAAA,UAAU,EAAEA,UATD;AAUXE,EAAAA,MAAM,EAAEA,MAVG;AAWXE,EAAAA,OAAO,EAAEA,OAXE;AAYXC,EAAAA,IAAI,EAAEA,IAZK;AAaXE,EAAAA,eAAe,EAAEA,eAbN;AAcXE,EAAAA,KAAK,EAAEA,KAdI;AAeXE,EAAAA,QAAQ,EAAEA,QAfC;AAgBXnC,EAAAA,IAAI,EAAEA,IAhBK;AAiBXE,EAAAA,SAAS,EAAEA,SAjBA;AAkBXC,EAAAA,KAAK,EAAEA,KAlBI;AAmBXE,EAAAA,MAAM,EAAEA,MAnBG;AAoBXE,EAAAA,QAAQ,EAAEA,QApBC;AAqBXE,EAAAA,QAAQ,EAAEA,QArBC;AAsBXE,EAAAA,cAAc,EAAEA,cAtBL;AAuBXE,EAAAA,UAAU,EAAEA,UAvBD;AAwBXE,EAAAA,OAAO,EAAEA,OAxBE;AAyBXC,EAAAA,aAAa,EAAEA,aAzBJ;AA0BXwB,EAAAA,YAAY,EAAEA,YA1BH;AA2BXD,EAAAA,SAAS,EAAEA,SA3BA;AA4BXE,EAAAA,gBAAgB,EAAEA,gBA5BP;AA6BXC,EAAAA,kBAAkB,EAAEA,kBA7BT;AA8BXG,EAAAA,UAAU,EAAEA,UA9BD;AA+BXR,EAAAA,MAAM,EAAEA,MA/BG;AAgCXW,EAAAA,gBAhCW;AAiCXC,EAAAA;AAjCW,CAAf;AAmCA,SAASE,MAAT,EAAiBL,QAAjB,EAA2BH,OAA3B,EAAoCzB,SAApC,EAA+CC,cAA/C,EAA+DC,UAA/D,EAA2EC,MAA3E,EAAmFC,MAAnF,EAA2FC,OAA3F,EAAoGC,UAApG,EAAgHE,MAAhH,EAAwHE,OAAxH,EAAiIC,IAAjI,EAAuIE,eAAvI,EAAwJE,KAAxJ,EAA+JE,QAA/J,EAAyKnC,IAAzK,EAA+KE,SAA/K,EAA0LC,KAA1L,EAAiME,MAAjM,EAAyME,QAAzM,EAAmNE,QAAnN,EAA6NE,cAA7N,EAA6OE,UAA7O,EAAyPE,OAAzP,EAAkQC,aAAlQ,EAAiRwB,YAAjR,EAA+RD,SAA/R,EAA0SE,gBAA1S,EAA4TC,kBAA5T,EAAgVG,UAAhV,EAA4VR,MAA5V,EAAoWW,gBAApW,EAAsXC,KAAtX","sourcesContent":["import { BlurAction } from \"./effect/blur/Blur.js\";\r\nimport { AccelerationEffectAction } from \"./effect/leveled/Accelerate.js\";\r\nimport { LoopEffectAction } from \"./effect/leveled/Loop.js\";\r\nimport { CartoonifyEffect } from \"./effect/Cartoonify.js\";\r\nimport { EffectOutline } from \"./effect/Outline.js\";\r\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\r\nimport { MakeTransparentEffectAction } from \"./effect/leveled/MakeTransparent.js\";\r\nimport { VectorizeEffectAction } from \"./effect/Vectorize.js\";\r\nimport { SimulateColorBlindEffectAction } from \"./effect/SimulateColorBlind.js\";\r\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\r\nimport { AssistColorBlindEffectAction } from \"./effect/AssistColorBlind.js\";\r\nimport { GradientFadeEffectAction } from \"./effect/GradientFade.js\";\r\nimport { FadeOutEffectAction } from \"./effect/leveled/FadeOut.js\";\r\nimport { ColorizeEffectAction } from \"./effect/Colorize.js\";\r\nimport { ShadowEffectAction } from \"./effect/Shadow.js\";\r\nimport { StyleTransfer } from \"./effect/StyleTransfer.js\";\r\nimport { DitherEffectAction } from \"./effect/Dither.js\";\r\nimport { DeshakeEffectAction } from \"./effect/leveled/Deshake.js\";\r\nimport { Pixelate } from \"./effect/pixelate/Pixelate.js\";\r\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\r\nimport { BlackwhiteEffectAction } from \"./effect/leveled/Blackwhite.js\";\r\nimport { FadeInEffectAction } from \"./effect/leveled/FadeIn.js\";\r\nimport { RemoveBackgroundAction } from \"./effect/RemoveBackgroundAction.js\";\r\nimport { ThemeEffect } from \"./effect/Theme.js\";\r\n/**\r\n * @summary action\r\n * @description Applies a blurring filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.BlurAction}\r\n */\r\nfunction blur(blurLevel) {\r\n    return new BlurAction(blurLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Converts the image to gray-scale (multiple shades of gray).\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction grayscale() {\r\n    return new SimpleEffectAction('grayscale');\r\n}\r\n/**\r\n * @summary action\r\n * @description Changes the color scheme of the image to sepia.\r\n * @memberOf Actions.Effect\r\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction sepia(level) {\r\n    return new EffectActionWithLevel('sepia', level);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a shadow filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param shadowLevel\r\n * @return {Actions.Effect.ShadowEffectAction}\r\n */\r\nfunction shadow(shadowLevel) {\r\n    return new ShadowEffectAction('shadow', shadowLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a colorizing filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\r\n * @return {Actions.Effect.ColorizeEffectAction}\r\n */\r\nfunction colorize(colorizeLevel) {\r\n    return new ColorizeEffectAction('colorize', colorizeLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies an oilPaint filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction oilPaint(oilPaintLevel) {\r\n    return new EffectActionWithStrength('oil_paint', oilPaintLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies an artistic filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {ArtisticFilterType | string} artisticFilterType\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction artisticFilter(artisticFilterType) {\r\n    return new SimpleEffectAction('art', artisticFilterType);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a cartoonify effect to the asset.\r\n * @memberOf Actions.Effect\r\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\r\n * @return {Actions.Effect.CartoonifyEffect}\r\n */\r\nfunction cartoonify(cartoonifyLevel) {\r\n    return new CartoonifyEffect('cartoonify', cartoonifyLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.EffectOutline}\r\n */\r\nfunction outline() {\r\n    return new EffectOutline();\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon|Neural Artwork Style Transfer}\r\n * @memberOf Actions.Effect\r\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/url-gen/qualifiers/sources`\r\n * @return {Actions.Effect.StyleTransfer}\r\n */\r\nfunction styleTransfer(imageSource) {\r\n    return new StyleTransfer(imageSource);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Causes a video clip to play forwards and then backwards.\r\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\r\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction boomerang() {\r\n    return new SimpleEffectAction('boomerang');\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\r\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction advancedRedEye() {\r\n    return new SimpleEffectAction('adv_redeye');\r\n}\r\n/**\r\n * @summary action\r\n * @description Converts the image to black and white.\r\n * @memberOf Actions.Effect\r\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\r\n * @return {Actions.Effect.BlackwhiteEffectAction}\r\n */\r\nfunction blackwhite(level) {\r\n    return new BlackwhiteEffectAction('blackwhite', level);\r\n}\r\n/**\r\n * @summary action\r\n * @description Negates the image colors (negative).\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction negate() {\r\n    return new SimpleEffectAction('negate');\r\n}\r\n/**\r\n * @summary action\r\n * @description Removes red eyes in the image.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction redEye() {\r\n    return new SimpleEffectAction('redeye');\r\n}\r\n/**\r\n * @summary action\r\n * @description Plays the video or audio file in reverse.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction reverse() {\r\n    return new SimpleEffectAction('reverse');\r\n}\r\n/**\r\n * @summary action\r\n * @description Changes the speed of the video playback.\r\n * @memberOf Actions.Effect\r\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\r\n * @return {Actions.Effect.AccelerationEffectAction}\r\n */\r\nfunction accelerate(speedIncreasePercent) {\r\n    return new AccelerationEffectAction(speedIncreasePercent);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Fade in at the beginning of the video.\r\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\r\n * @return {Actions.Effect.FadeInEffectAction}\r\n */\r\nfunction fadeIn(fadeLength) {\r\n    return new FadeInEffectAction(fadeLength);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Fade out at the end of the video.\r\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\r\n * @return {Actions.Effect.FadeoutEffectAction}\r\n */\r\nfunction fadeOut(fadeLength) {\r\n    return new FadeOutEffectAction(fadeLength);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\r\n * The total number of iterations is the number of additional loops plus one. <br/>\r\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\r\n * @memberOf Actions.Effect\r\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\r\n * @return {Actions.Effect.LoopEffectAction}\r\n */\r\nfunction loop(additionalLoops) {\r\n    return new LoopEffectAction('loop', additionalLoops);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\r\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\r\n *\r\n * @memberOf Actions.Effect\r\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\r\n * @return {Actions.Effect.MakeTransparentEffectAction}\r\n */\r\nfunction makeTransparent(tolerance) {\r\n    return new MakeTransparentEffectAction('make_transparent', tolerance);\r\n}\r\n/**\r\n * @summary action\r\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\r\n * @memberOf Actions.Effect\r\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction noise(percentage) {\r\n    return new EffectActionWithLevel('noise', percentage);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a vignette effect.\r\n * @memberOf Actions.Effect\r\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction vignette(strength) {\r\n    return new EffectActionWithStrength('vignette', strength);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies an ordered dither filter to the image.\r\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/url-gen/qualifiers/dither} for ditherType.\r\n * @memberOf Actions.Effect\r\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\r\n * @return {Actions.Effect.DitherEffectAction}\r\n */\r\nfunction dither(ditherType) {\r\n    return new DitherEffectAction('ordered_dither', ditherType);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Vectorizes the image.\r\n * Notes:\r\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\r\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\r\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.VectorizeEffectAction}\r\n */\r\nfunction vectorize() {\r\n    return new VectorizeEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies a gradient fade effect from one edge of the image.\r\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\r\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\r\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\r\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\r\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\r\n * To apply different amounts of fade to multiple edges, use chained fade effects.\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GradientFadeEffectAction}\r\n */\r\nfunction gradientFade() {\r\n    return new GradientFadeEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\r\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.AssistColorBlindEffectAction}\r\n */\r\nfunction assistColorBlind() {\r\n    return new AssistColorBlindEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\r\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\r\n */\r\nfunction simulateColorBlind() {\r\n    return new SimulateColorBlindEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.DeshakeEffectAction}\r\n */\r\nfunction deshake(pixels) {\r\n    return new DeshakeEffectAction('deshake', pixels);\r\n}\r\n/**\r\n * @summary action\r\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\r\n * additional layer and specifying the transition effect\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction transition() {\r\n    return new SimpleEffectAction('transition');\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a pixelatering filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.Pixelate}\r\n */\r\nfunction pixelate(squareSize) {\r\n    return new Pixelate(squareSize);\r\n}\r\n/**\r\n * @summary action\r\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\r\n *              Use when the background is a uniform color.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval|Background Removal}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.RemoveBackgroundAction}\r\n */\r\nfunction removeBackground() {\r\n    return new RemoveBackgroundAction();\r\n}\r\n/**\r\n *\r\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\r\n * @param {SystemColors} color\r\n * @return {Actions.Effect.ThemeEffect}\r\n */\r\nfunction theme(color) {\r\n    return new ThemeEffect(color);\r\n}\r\n/**\r\n * @description Defines effects that you can apply to transform your assets.\r\n * @memberOf Actions\r\n * @namespace Effect\r\n * @example\r\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * // Import everything, or just the action you need for tree-shaking purposes\r\n * import {Effect, sepia} from \"@cloudinary/url-gen/actions/effect\";\r\n * import {ArtisticFilter, alDente} from \"../../../src/qualifiers/artisticFilter\";\r\n * import {ShakeStrength, pixels16} from \"../../../src/qualifiers/shakeStrength\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.effect(Effect.advancedRedEye())\r\n * .effect(Effect.accelerate())\r\n * .effect(Effect.accelerate(100))\r\n * .effect(Effect.accelerate().rate(5))\r\n * .effect(Effect.boomerang())\r\n * .effect(Effect.blackwhite())\r\n * .effect(Effect.blackwhite(10))\r\n * .effect(Effect.blackwhite().threshold(20))\r\n * .effect(Effect.fadeIn(100))\r\n * .effect(Effect.fadeIn().duration(5))\r\n * .effect(Effect.fadeOut(100))\r\n * .effect(Effect.fadeOut().duration(5))\r\n * .effect(Effect.grayscale())\r\n * .effect(Effect.loop())\r\n * .effect(Effect.loop(100))\r\n * .effect(Effect.loop().additionalIterations(5))\r\n * .effect(Effect.makeTransparent())\r\n * .effect(Effect.makeTransparent(100))\r\n * .effect(Effect.makeTransparent().tolerance(5))\r\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\r\n * .effect(Effect.noise())\r\n * .effect(Effect.noise(100))\r\n * .effect(Effect.noise().level(5))\r\n * .effect(Effect.negate())\r\n * .effect(Effect.reverse())\r\n * .effect(Effect.redEye())\r\n * .effect(Effect.sepia())\r\n * .effect(Effect.sepia(100))\r\n * .effect(Effect.sepia().level(5))\r\n * .effect(Effect.vignette())\r\n * .effect(Effect.vignette(100))\r\n * .effect(Effect.vignette().strength(5))\r\n * .effect(Effect.deshake())\r\n * .effect(Effect.deshake(10))\r\n * .effect(Effect.artisticFilter(alDente())\r\n * .effect(Effect.deshake().shakeStrength(pixels16()))\r\n */\r\nconst Effect = {\r\n    pixelate: pixelate,\r\n    deshake: deshake,\r\n    boomerang: boomerang,\r\n    advancedRedEye: advancedRedEye,\r\n    blackwhite,\r\n    negate: negate,\r\n    redEye: redEye,\r\n    reverse: reverse,\r\n    accelerate: accelerate,\r\n    fadeIn: fadeIn,\r\n    fadeOut: fadeOut,\r\n    loop: loop,\r\n    makeTransparent: makeTransparent,\r\n    noise: noise,\r\n    vignette: vignette,\r\n    blur: blur,\r\n    grayscale: grayscale,\r\n    sepia: sepia,\r\n    shadow: shadow,\r\n    colorize: colorize,\r\n    oilPaint: oilPaint,\r\n    artisticFilter: artisticFilter,\r\n    cartoonify: cartoonify,\r\n    outline: outline,\r\n    styleTransfer: styleTransfer,\r\n    gradientFade: gradientFade,\r\n    vectorize: vectorize,\r\n    assistColorBlind: assistColorBlind,\r\n    simulateColorBlind: simulateColorBlind,\r\n    transition: transition,\r\n    dither: dither,\r\n    removeBackground,\r\n    theme\r\n};\r\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, theme };\r\n"]},"metadata":{},"sourceType":"module"}