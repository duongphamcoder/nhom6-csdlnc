{"ast":null,"code":"/**\r\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\r\n * @memberOf Actions\r\n * @namespace Delivery\r\n * @example\r\n * See the examples under every method\r\n */\nimport { DeliveryFormatAction } from \"./delivery/DeliveryFormatAction.js\";\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQualityAction.js\";\nimport { DeliveryColorSpaceFromICCAction } from \"./delivery/DeliveryColorSpaceFromICCAction.js\";\nimport { DeliveryAction } from \"./delivery/DeliveryAction.js\";\nimport { DeliveryColorSpaceAction } from \"./delivery/DeliveryColorSpaceAction.js\";\nimport { DeliveryDPRAction } from \"./delivery/DeliveryDPRAction.js\";\n/**\r\n * @summary action\r\n * @description Defines the format of the delivered asset.\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support|Image formats}\r\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Video formats}\r\n *\r\n * @memberOf Actions.Delivery\r\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\r\n * possible values\r\n * @return {Actions.Delivery.DeliveryFormat}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  format('jpg'),\r\n * );\r\n *\r\n */\n\nfunction format(format) {\n  return new DeliveryFormatAction('f', format);\n}\n/**\r\n * @summary action\r\n * @description Deliver the image in the specified device pixel ratio.\r\n * @memberOf Actions.Delivery\r\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {dpr} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  dpr('2.0'),\r\n * );\r\n */\n\n\nfunction dpr(dpr) {\n  return new DeliveryDPRAction(dpr);\n}\n/**\r\n * @summary action\r\n * @description Controls the quality of the delivered image or video.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality|Image quality}\r\n *  {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#quality_control|Video quality}\r\n * @memberOf Actions.Delivery\r\n * @param {QualityTypes | string | number | Qualifiers.Quality} qualityType For a list of supported quality types see\r\n * {@link Qualifiers.Quality| quality types} for\r\n * possible values.\r\n * @return {Actions.Delivery.DeliveryQualityAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {quality} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {quality} from \"@cloudinary/url-gen/qualifiers/quantity\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  quality('auto'),\r\n * );\r\n */\n\n\nfunction quality(qualityType) {\n  return new DeliveryQualityAction(qualityType);\n}\n/**\r\n * @summary action\r\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\r\n * document to a web image delivery format.\r\n * @memberOf Actions.Delivery\r\n * @param {number | string} value The density in dpi.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {density} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  density(150),\r\n * );\r\n */\n\n\nfunction density(value) {\n  return new DeliveryAction('dn', value, 'density');\n}\n/**\r\n * @summary action\r\n * @description Default images can be used in the case that a requested image does not exist.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicIdWithExtension Default image public ID\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {defaultImage} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  defaultImage('sample'),\r\n * );\r\n */\n\n\nfunction defaultImage(publicIdWithExtension) {\n  return new DeliveryAction('d', publicIdWithExtension, 'defaultImage');\n}\n/**\r\n * @summary action\r\n * @description Controls the color space used for the delivered image.\r\n * @memberOf Actions.Delivery\r\n * @param {string | Qualifiers.ColorSpace} mode The color space.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpace} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpace(trueColor()),\r\n * );\r\n */\n\n\nfunction colorSpace(mode) {\n  return new DeliveryColorSpaceAction(mode);\n}\n/**\r\n * @summary action\r\n * @description Specifies the ICC profile to use for the color space.\r\n * The ICC file must be uploaded to your account as a raw, authenticated file.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\r\n * color space.\r\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpaceFromICC} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpaceFromICC('sample.icc'),\r\n * );\r\n */\n\n\nfunction colorSpaceFromICC(publicId) {\n  return new DeliveryColorSpaceFromICCAction(publicId);\n}\n\nconst Delivery = {\n  format,\n  dpr,\n  density,\n  defaultImage,\n  colorSpace,\n  colorSpaceFromICC,\n  quality\n};\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/actions/delivery.js"],"names":["DeliveryFormatAction","DeliveryQualityAction","DeliveryColorSpaceFromICCAction","DeliveryAction","DeliveryColorSpaceAction","DeliveryDPRAction","format","dpr","quality","qualityType","density","value","defaultImage","publicIdWithExtension","colorSpace","mode","colorSpaceFromICC","publicId","Delivery"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAT,QAAqC,oCAArC;AACA,SAASC,qBAAT,QAAsC,qCAAtC;AACA,SAASC,+BAAT,QAAgD,+CAAhD;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,wBAAT,QAAyC,wCAAzC;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBA,MAAhB,EAAwB;AACpB,SAAO,IAAIN,oBAAJ,CAAyB,GAAzB,EAA8BM,MAA9B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,GAAT,CAAaA,GAAb,EAAkB;AACd,SAAO,IAAIF,iBAAJ,CAAsBE,GAAtB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,WAAjB,EAA8B;AAC1B,SAAO,IAAIR,qBAAJ,CAA0BQ,WAA1B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,SAAO,IAAIR,cAAJ,CAAmB,IAAnB,EAAyBQ,KAAzB,EAAgC,SAAhC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,qBAAtB,EAA6C;AACzC,SAAO,IAAIV,cAAJ,CAAmB,GAAnB,EAAwBU,qBAAxB,EAA+C,cAA/C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAO,IAAIX,wBAAJ,CAA6BW,IAA7B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC,SAAO,IAAIf,+BAAJ,CAAoCe,QAApC,CAAP;AACH;;AACD,MAAMC,QAAQ,GAAG;AACbZ,EAAAA,MADa;AAEbC,EAAAA,GAFa;AAGbG,EAAAA,OAHa;AAIbE,EAAAA,YAJa;AAKbE,EAAAA,UALa;AAMbE,EAAAA,iBANa;AAObR,EAAAA;AAPa,CAAjB;AASA,SAASU,QAAT,EAAmBZ,MAAnB,EAA2BC,GAA3B,EAAgCC,OAAhC,EAAyCE,OAAzC,EAAkDE,YAAlD,EAAgEE,UAAhE,EAA4EE,iBAA5E","sourcesContent":["/**\r\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\r\n * @memberOf Actions\r\n * @namespace Delivery\r\n * @example\r\n * See the examples under every method\r\n */\r\nimport { DeliveryFormatAction } from \"./delivery/DeliveryFormatAction.js\";\r\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQualityAction.js\";\r\nimport { DeliveryColorSpaceFromICCAction } from \"./delivery/DeliveryColorSpaceFromICCAction.js\";\r\nimport { DeliveryAction } from \"./delivery/DeliveryAction.js\";\r\nimport { DeliveryColorSpaceAction } from \"./delivery/DeliveryColorSpaceAction.js\";\r\nimport { DeliveryDPRAction } from \"./delivery/DeliveryDPRAction.js\";\r\n/**\r\n * @summary action\r\n * @description Defines the format of the delivered asset.\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support|Image formats}\r\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Video formats}\r\n *\r\n * @memberOf Actions.Delivery\r\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\r\n * possible values\r\n * @return {Actions.Delivery.DeliveryFormat}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  format('jpg'),\r\n * );\r\n *\r\n */\r\nfunction format(format) {\r\n    return new DeliveryFormatAction('f', format);\r\n}\r\n/**\r\n * @summary action\r\n * @description Deliver the image in the specified device pixel ratio.\r\n * @memberOf Actions.Delivery\r\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {dpr} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  dpr('2.0'),\r\n * );\r\n */\r\nfunction dpr(dpr) {\r\n    return new DeliveryDPRAction(dpr);\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the quality of the delivered image or video.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality|Image quality}\r\n *  {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#quality_control|Video quality}\r\n * @memberOf Actions.Delivery\r\n * @param {QualityTypes | string | number | Qualifiers.Quality} qualityType For a list of supported quality types see\r\n * {@link Qualifiers.Quality| quality types} for\r\n * possible values.\r\n * @return {Actions.Delivery.DeliveryQualityAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {quality} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {quality} from \"@cloudinary/url-gen/qualifiers/quantity\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  quality('auto'),\r\n * );\r\n */\r\nfunction quality(qualityType) {\r\n    return new DeliveryQualityAction(qualityType);\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\r\n * document to a web image delivery format.\r\n * @memberOf Actions.Delivery\r\n * @param {number | string} value The density in dpi.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {density} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  density(150),\r\n * );\r\n */\r\nfunction density(value) {\r\n    return new DeliveryAction('dn', value, 'density');\r\n}\r\n/**\r\n * @summary action\r\n * @description Default images can be used in the case that a requested image does not exist.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicIdWithExtension Default image public ID\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {defaultImage} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  defaultImage('sample'),\r\n * );\r\n */\r\nfunction defaultImage(publicIdWithExtension) {\r\n    return new DeliveryAction('d', publicIdWithExtension, 'defaultImage');\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the color space used for the delivered image.\r\n * @memberOf Actions.Delivery\r\n * @param {string | Qualifiers.ColorSpace} mode The color space.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpace} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpace(trueColor()),\r\n * );\r\n */\r\nfunction colorSpace(mode) {\r\n    return new DeliveryColorSpaceAction(mode);\r\n}\r\n/**\r\n * @summary action\r\n * @description Specifies the ICC profile to use for the color space.\r\n * The ICC file must be uploaded to your account as a raw, authenticated file.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\r\n * color space.\r\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpaceFromICC} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpaceFromICC('sample.icc'),\r\n * );\r\n */\r\nfunction colorSpaceFromICC(publicId) {\r\n    return new DeliveryColorSpaceFromICCAction(publicId);\r\n}\r\nconst Delivery = {\r\n    format,\r\n    dpr,\r\n    density,\r\n    defaultImage,\r\n    colorSpace,\r\n    colorSpaceFromICC,\r\n    quality\r\n};\r\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };\r\n"]},"metadata":{},"sourceType":"module"}