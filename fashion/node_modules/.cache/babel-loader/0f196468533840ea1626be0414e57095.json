{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\r\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\r\n *                The class implements the Builder pattern, where strength() and preserveColor()\r\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\n\nclass StyleTransfer extends Action {\n  /**\r\n   * The Image Source used to create the style transfer,\r\n   * Use the Image Source builder to quickly create a source:\r\n   * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\r\n   * </br>Create: `Source.image('dog')`\r\n   * @param {ImageSource} imageSource\r\n   */\n  constructor(imageSource) {\n    super();\n    this.imageSource = imageSource;\n  }\n  /**\r\n   * Determines the strength in which the styleTransfer is applied.\r\n   * @param {number} [effectStrength] - The strength level, 1-100, default: 100\r\n   * @return {this}\r\n   */\n\n\n  strength() {\n    let effectStrength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.effectStrength = effectStrength;\n    return this;\n  }\n  /**\r\n   * More aggressively preserves the colors of the the target photo,\r\n   * Can be used with `strength()` to enhance this behaviour\r\n   * @param {boolean} bool\r\n   * @return {this}\r\n   */\n\n\n  preserveColor() {\n    let bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.preserve = bool;\n    return this;\n  }\n  /**\r\n   * The `build` phase of the Action, used internally to concat all the options received into a single string.\r\n   * The result of this method is the toString() of the imageLayer provided in the constructor.\r\n   * @return {string}\r\n   */\n\n\n  toString() {\n    const NAME = 'style_transfer';\n    const PRES = this.preserve ? 'preserve_color' : null;\n    const STRENGTH = this.effectStrength; // Create the style effect\n\n    const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH])); // Handle the source for publicID,\n\n    const sourceOpenString = this.imageSource.getOpenSourceString('l'); // Handle source transformation\n\n    const imgTx = this.imageSource.getTransformation();\n    const sourceTransformation = imgTx ? imgTx.toString() : '';\n    return [sourceOpenString, sourceTransformation, `${styleEffect},fl_layer_apply`].filter(a => a).join('/');\n  }\n\n}\n\nexport { StyleTransfer };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion-web/node_modules/@cloudinary/url-gen/actions/effect/StyleTransfer.js"],"names":["QualifierValue","Action","Qualifier","StyleTransfer","constructor","imageSource","strength","effectStrength","preserveColor","bool","preserve","toString","NAME","PRES","STRENGTH","styleEffect","sourceOpenString","getOpenSourceString","imgTx","getTransformation","sourceTransformation","filter","a","join"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BF,MAA5B,CAAmC;AAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIG,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB;AACA,SAAKA,WAAL,GAAmBA,WAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAwB;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;AAC5B,SAAKA,cAAL,GAAsBA,cAAtB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,GAAc;AAAA,QAAbC,IAAa,uEAAN,IAAM;AACvB,SAAKC,QAAL,GAAgBD,IAAhB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,GAAG;AACP,UAAMC,IAAI,GAAG,gBAAb;AACA,UAAMC,IAAI,GAAG,KAAKH,QAAL,GAAgB,gBAAhB,GAAmC,IAAhD;AACA,UAAMI,QAAQ,GAAG,KAAKP,cAAtB,CAHO,CAIP;;AACA,UAAMQ,WAAW,GAAG,IAAIb,SAAJ,CAAc,GAAd,EAAmB,IAAIF,cAAJ,CAAmB,CAACY,IAAD,EAAOC,IAAP,EAAaC,QAAb,CAAnB,CAAnB,CAApB,CALO,CAMP;;AACA,UAAME,gBAAgB,GAAG,KAAKX,WAAL,CAAiBY,mBAAjB,CAAqC,GAArC,CAAzB,CAPO,CAQP;;AACA,UAAMC,KAAK,GAAG,KAAKb,WAAL,CAAiBc,iBAAjB,EAAd;AACA,UAAMC,oBAAoB,GAAGF,KAAK,GAAGA,KAAK,CAACP,QAAN,EAAH,GAAsB,EAAxD;AACA,WAAO,CACHK,gBADG,EAEHI,oBAFG,EAGF,GAAEL,WAAY,iBAHZ,EAILM,MAJK,CAIGC,CAAD,IAAOA,CAJT,EAIYC,IAJZ,CAIiB,GAJjB,CAAP;AAKH;;AApD8B;;AAsDnC,SAASpB,aAAT","sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\r\n *                The class implements the Builder pattern, where strength() and preserveColor()\r\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass StyleTransfer extends Action {\r\n    /**\r\n     * The Image Source used to create the style transfer,\r\n     * Use the Image Source builder to quickly create a source:\r\n     * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\r\n     * </br>Create: `Source.image('dog')`\r\n     * @param {ImageSource} imageSource\r\n     */\r\n    constructor(imageSource) {\r\n        super();\r\n        this.imageSource = imageSource;\r\n    }\r\n    /**\r\n     * Determines the strength in which the styleTransfer is applied.\r\n     * @param {number} [effectStrength] - The strength level, 1-100, default: 100\r\n     * @return {this}\r\n     */\r\n    strength(effectStrength = null) {\r\n        this.effectStrength = effectStrength;\r\n        return this;\r\n    }\r\n    /**\r\n     * More aggressively preserves the colors of the the target photo,\r\n     * Can be used with `strength()` to enhance this behaviour\r\n     * @param {boolean} bool\r\n     * @return {this}\r\n     */\r\n    preserveColor(bool = true) {\r\n        this.preserve = bool;\r\n        return this;\r\n    }\r\n    /**\r\n     * The `build` phase of the Action, used internally to concat all the options received into a single string.\r\n     * The result of this method is the toString() of the imageLayer provided in the constructor.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        const NAME = 'style_transfer';\r\n        const PRES = this.preserve ? 'preserve_color' : null;\r\n        const STRENGTH = this.effectStrength;\r\n        // Create the style effect\r\n        const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH]));\r\n        // Handle the source for publicID,\r\n        const sourceOpenString = this.imageSource.getOpenSourceString('l');\r\n        // Handle source transformation\r\n        const imgTx = this.imageSource.getTransformation();\r\n        const sourceTransformation = imgTx ? imgTx.toString() : '';\r\n        return [\r\n            sourceOpenString,\r\n            sourceTransformation,\r\n            `${styleEffect},fl_layer_apply`\r\n        ].filter((a) => a).join('/');\r\n    }\r\n}\r\nexport { StyleTransfer };\r\n"]},"metadata":{},"sourceType":"module"}