{"ast":null,"code":"/**\r\n * @description Contains functions to select the type of color-blind condition to simulate.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/blog/open_your_eyes_to_color_accessibility|Blog: Open your Eyes to Color Accessibility}\r\n * @memberOf Qualifiers\r\n * @namespace SimulateColorBlindValues\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\n\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\nfunction deuteranopia() {\n  return 'deuteranopia';\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\n\n\nfunction protanopia() {\n  return 'protanopia';\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\n\n\nfunction tritanopia() {\n  return 'tritanopia';\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\n\n\nfunction tritanomaly() {\n  return 'tritanomaly';\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\n\n\nfunction deuteranomaly() {\n  return 'deuteranomaly';\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\n\n\nfunction coneMonochromacy() {\n  return 'cone_monochromacy';\n}\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\n\n\nfunction rodMonochromacy() {\n  return 'rod_monochromacy';\n}\n\nconst SimulateColorBlind = {\n  coneMonochromacy,\n  deuteranomaly,\n  deuteranopia,\n  protanopia,\n  rodMonochromacy,\n  tritanomaly,\n  tritanopia\n};\nexport { SimulateColorBlind, coneMonochromacy, deuteranomaly, deuteranopia, protanopia, rodMonochromacy, tritanomaly, tritanopia };","map":{"version":3,"sources":["C:/Users/Pham Tan Duong/Desktop/cloneGit/fashion/node_modules/@cloudinary/url-gen/qualifiers/simulateColorBlind.js"],"names":["deuteranopia","protanopia","tritanopia","tritanomaly","deuteranomaly","coneMonochromacy","rodMonochromacy","SimulateColorBlind"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,GAAwB;AACpB,SAAO,cAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAsB;AAClB,SAAO,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAsB;AAClB,SAAO,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,GAAuB;AACnB,SAAO,aAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,GAAyB;AACrB,SAAO,eAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,GAA4B;AACxB,SAAO,mBAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,GAA2B;AACvB,SAAO,kBAAP;AACH;;AACD,MAAMC,kBAAkB,GAAG;AACvBF,EAAAA,gBADuB;AAEvBD,EAAAA,aAFuB;AAGvBJ,EAAAA,YAHuB;AAIvBC,EAAAA,UAJuB;AAKvBK,EAAAA,eALuB;AAMvBH,EAAAA,WANuB;AAOvBD,EAAAA;AAPuB,CAA3B;AASA,SAASK,kBAAT,EAA6BF,gBAA7B,EAA+CD,aAA/C,EAA8DJ,YAA9D,EAA4EC,UAA5E,EAAwFK,eAAxF,EAAyGH,WAAzG,EAAsHD,UAAtH","sourcesContent":["/**\r\n * @description Contains functions to select the type of color-blind condition to simulate.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/blog/open_your_eyes_to_color_accessibility|Blog: Open your Eyes to Color Accessibility}\r\n * @memberOf Qualifiers\r\n * @namespace SimulateColorBlindValues\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction deuteranopia() {\r\n    return 'deuteranopia';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction protanopia() {\r\n    return 'protanopia';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction tritanopia() {\r\n    return 'tritanopia';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction tritanomaly() {\r\n    return 'tritanomaly';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction deuteranomaly() {\r\n    return 'deuteranomaly';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction coneMonochromacy() {\r\n    return 'cone_monochromacy';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction rodMonochromacy() {\r\n    return 'rod_monochromacy';\r\n}\r\nconst SimulateColorBlind = {\r\n    coneMonochromacy,\r\n    deuteranomaly,\r\n    deuteranopia,\r\n    protanopia,\r\n    rodMonochromacy,\r\n    tritanomaly,\r\n    tritanopia\r\n};\r\nexport { SimulateColorBlind, coneMonochromacy, deuteranomaly, deuteranopia, protanopia, rodMonochromacy, tritanomaly, tritanopia };\r\n"]},"metadata":{},"sourceType":"module"}